// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: naming.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "naming.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tinynet {
namespace naming {

namespace {

const ::google::protobuf::Descriptor* KeyValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterPutData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterPutData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterDelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterDelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientPutRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientPutRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGetRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGetRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDelRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDelRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientKeysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientKeysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientKeysRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientKeysRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClusterOpcode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientOpcode_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* NamingRpcService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_naming_2eproto() {
  protobuf_AddDesc_naming_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "naming.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValuePair_descriptor_ = file->message_type(0);
  static const int KeyValuePair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, expire_),
  };
  KeyValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValuePair_descriptor_,
      KeyValuePair::default_instance_,
      KeyValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValuePair));
  SnapshotData_descriptor_ = file->message_type(1);
  static const int SnapshotData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, data_),
  };
  SnapshotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotData_descriptor_,
      SnapshotData::default_instance_,
      SnapshotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotData));
  ClusterPutData_descriptor_ = file->message_type(2);
  static const int ClusterPutData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterPutData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterPutData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterPutData, expire_),
  };
  ClusterPutData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterPutData_descriptor_,
      ClusterPutData::default_instance_,
      ClusterPutData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterPutData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterPutData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterPutData));
  ClusterDelData_descriptor_ = file->message_type(3);
  static const int ClusterDelData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDelData, key_),
  };
  ClusterDelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterDelData_descriptor_,
      ClusterDelData::default_instance_,
      ClusterDelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterDelData));
  ClusterMessage_descriptor_ = file->message_type(4);
  static const int ClusterMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMessage, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMessage, put_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMessage, del_data_),
  };
  ClusterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterMessage_descriptor_,
      ClusterMessage::default_instance_,
      ClusterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterMessage));
  ClientPutReq_descriptor_ = file->message_type(5);
  static const int ClientPutReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutReq, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutReq, ttl_),
  };
  ClientPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientPutReq_descriptor_,
      ClientPutReq::default_instance_,
      ClientPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientPutReq));
  ClientPutRes_descriptor_ = file->message_type(6);
  static const int ClientPutRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutRes, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutRes, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutRes, ttl_),
  };
  ClientPutRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientPutRes_descriptor_,
      ClientPutRes::default_instance_,
      ClientPutRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPutRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientPutRes));
  ClientGetReq_descriptor_ = file->message_type(7);
  static const int ClientGetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGetReq, key_),
  };
  ClientGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGetReq_descriptor_,
      ClientGetReq::default_instance_,
      ClientGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGetReq));
  ClientGetRes_descriptor_ = file->message_type(8);
  static const int ClientGetRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGetRes, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGetRes, value_),
  };
  ClientGetRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGetRes_descriptor_,
      ClientGetRes::default_instance_,
      ClientGetRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGetRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGetRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGetRes));
  ClientDelReq_descriptor_ = file->message_type(9);
  static const int ClientDelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelReq, key_),
  };
  ClientDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientDelReq_descriptor_,
      ClientDelReq::default_instance_,
      ClientDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientDelReq));
  ClientDelRes_descriptor_ = file->message_type(10);
  static const int ClientDelRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelRes, key_),
  };
  ClientDelRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientDelRes_descriptor_,
      ClientDelRes::default_instance_,
      ClientDelRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientDelRes));
  ClientKeysReq_descriptor_ = file->message_type(11);
  static const int ClientKeysReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientKeysReq, key_),
  };
  ClientKeysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientKeysReq_descriptor_,
      ClientKeysReq::default_instance_,
      ClientKeysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientKeysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientKeysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientKeysReq));
  ClientKeysRes_descriptor_ = file->message_type(12);
  static const int ClientKeysRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientKeysRes, keys_),
  };
  ClientKeysRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientKeysRes_descriptor_,
      ClientKeysRes::default_instance_,
      ClientKeysRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientKeysRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientKeysRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientKeysRes));
  ClientRequest_descriptor_ = file->message_type(13);
  static const int ClientRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, put_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, get_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, del_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, keys_req_),
  };
  ClientRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_descriptor_,
      ClientRequest::default_instance_,
      ClientRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest));
  ClientResponse_descriptor_ = file->message_type(14);
  static const int ClientResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, redirect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, put_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, get_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, del_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, keys_res_),
  };
  ClientResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientResponse_descriptor_,
      ClientResponse::default_instance_,
      ClientResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientResponse));
  ClusterOpcode_descriptor_ = file->enum_type(0);
  ClientOpcode_descriptor_ = file->enum_type(1);
  NamingRpcService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_naming_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValuePair_descriptor_, &KeyValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotData_descriptor_, &SnapshotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterPutData_descriptor_, &ClusterPutData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterDelData_descriptor_, &ClusterDelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterMessage_descriptor_, &ClusterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientPutReq_descriptor_, &ClientPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientPutRes_descriptor_, &ClientPutRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGetReq_descriptor_, &ClientGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGetRes_descriptor_, &ClientGetRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientDelReq_descriptor_, &ClientDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientDelRes_descriptor_, &ClientDelRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientKeysReq_descriptor_, &ClientKeysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientKeysRes_descriptor_, &ClientKeysRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_descriptor_, &ClientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientResponse_descriptor_, &ClientResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_naming_2eproto() {
  delete KeyValuePair::default_instance_;
  delete KeyValuePair_reflection_;
  delete SnapshotData::default_instance_;
  delete SnapshotData_reflection_;
  delete ClusterPutData::default_instance_;
  delete ClusterPutData_reflection_;
  delete ClusterDelData::default_instance_;
  delete ClusterDelData_reflection_;
  delete ClusterMessage::default_instance_;
  delete ClusterMessage_reflection_;
  delete ClientPutReq::default_instance_;
  delete ClientPutReq_reflection_;
  delete ClientPutRes::default_instance_;
  delete ClientPutRes_reflection_;
  delete ClientGetReq::default_instance_;
  delete ClientGetReq_reflection_;
  delete ClientGetRes::default_instance_;
  delete ClientGetRes_reflection_;
  delete ClientDelReq::default_instance_;
  delete ClientDelReq_reflection_;
  delete ClientDelRes::default_instance_;
  delete ClientDelRes_reflection_;
  delete ClientKeysReq::default_instance_;
  delete ClientKeysReq_reflection_;
  delete ClientKeysRes::default_instance_;
  delete ClientKeysRes_reflection_;
  delete ClientRequest::default_instance_;
  delete ClientRequest_reflection_;
  delete ClientResponse::default_instance_;
  delete ClientResponse_reflection_;
}

void protobuf_AddDesc_naming_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014naming.proto\022\016tinynet.naming\":\n\014KeyVal"
    "uePair\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\016\n\006ex"
    "pire\030\003 \001(\003\":\n\014SnapshotData\022*\n\004data\030\001 \003(\013"
    "2\034.tinynet.naming.KeyValuePair\"<\n\016Cluste"
    "rPutData\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\016\n\006"
    "expire\030\003 \001(\003\"\035\n\016ClusterDelData\022\013\n\003key\030\001 "
    "\001(\t\"\243\001\n\016ClusterMessage\022-\n\006opcode\030\001 \001(\0162\035"
    ".tinynet.naming.ClusterOpcode\0220\n\010put_dat"
    "a\030\002 \001(\0132\036.tinynet.naming.ClusterPutData\022"
    "0\n\010del_data\030\003 \001(\0132\036.tinynet.naming.Clust"
    "erDelData\"7\n\014ClientPutReq\022\013\n\003key\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\t\022\013\n\003ttl\030\003 \001(\005\"7\n\014ClientPutR"
    "es\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\013\n\003ttl\030\003 "
    "\001(\005\"\033\n\014ClientGetReq\022\013\n\003key\030\001 \001(\t\"*\n\014Clie"
    "ntGetRes\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\033\n\014"
    "ClientDelReq\022\013\n\003key\030\001 \001(\t\"\033\n\014ClientDelRe"
    "s\022\013\n\003key\030\001 \001(\t\"\034\n\rClientKeysReq\022\013\n\003key\030\001"
    " \001(\t\"\035\n\rClientKeysRes\022\014\n\004keys\030\001 \003(\t\"\373\001\n\r"
    "ClientRequest\022,\n\006opcode\030\001 \001(\0162\034.tinynet."
    "naming.ClientOpcode\022-\n\007put_req\030\002 \001(\0132\034.t"
    "inynet.naming.ClientPutReq\022-\n\007get_req\030\003 "
    "\001(\0132\034.tinynet.naming.ClientGetReq\022-\n\007del"
    "_req\030\004 \001(\0132\034.tinynet.naming.ClientDelReq"
    "\022/\n\010keys_req\030\005 \001(\0132\035.tinynet.naming.Clie"
    "ntKeysReq\"\251\002\n\016ClientResponse\022\031\n\nerror_co"
    "de\030\001 \001(\005:\005-5702\022\020\n\010redirect\030\002 \001(\t\022,\n\006opc"
    "ode\030\003 \001(\0162\034.tinynet.naming.ClientOpcode\022"
    "-\n\007put_res\030\004 \001(\0132\034.tinynet.naming.Client"
    "PutRes\022-\n\007get_res\030\005 \001(\0132\034.tinynet.naming"
    ".ClientGetRes\022-\n\007del_res\030\006 \001(\0132\034.tinynet"
    ".naming.ClientDelRes\022/\n\010keys_res\030\007 \001(\0132\035"
    ".tinynet.naming.ClientKeysRes*+\n\rCluster"
    "Opcode\022\014\n\010PUT_DATA\020\001\022\014\n\010DEL_DATA\020\002*x\n\014Cl"
    "ientOpcode\022\013\n\007GET_REQ\020\001\022\013\n\007GET_RES\020\002\022\013\n\007"
    "PUT_REQ\020\003\022\013\n\007PUT_RES\020\004\022\013\n\007DEL_REQ\020\005\022\013\n\007D"
    "EL_RES\020\006\022\014\n\010KEYS_REQ\020\007\022\014\n\010KEYS_RES\020\0102[\n\020"
    "NamingRpcService\022G\n\006Invoke\022\035.tinynet.nam"
    "ing.ClientRequest\032\036.tinynet.naming.Clien"
    "tResponseB\003\200\001\001", 1534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "naming.proto", &protobuf_RegisterTypes);
  KeyValuePair::default_instance_ = new KeyValuePair();
  SnapshotData::default_instance_ = new SnapshotData();
  ClusterPutData::default_instance_ = new ClusterPutData();
  ClusterDelData::default_instance_ = new ClusterDelData();
  ClusterMessage::default_instance_ = new ClusterMessage();
  ClientPutReq::default_instance_ = new ClientPutReq();
  ClientPutRes::default_instance_ = new ClientPutRes();
  ClientGetReq::default_instance_ = new ClientGetReq();
  ClientGetRes::default_instance_ = new ClientGetRes();
  ClientDelReq::default_instance_ = new ClientDelReq();
  ClientDelRes::default_instance_ = new ClientDelRes();
  ClientKeysReq::default_instance_ = new ClientKeysReq();
  ClientKeysRes::default_instance_ = new ClientKeysRes();
  ClientRequest::default_instance_ = new ClientRequest();
  ClientResponse::default_instance_ = new ClientResponse();
  KeyValuePair::default_instance_->InitAsDefaultInstance();
  SnapshotData::default_instance_->InitAsDefaultInstance();
  ClusterPutData::default_instance_->InitAsDefaultInstance();
  ClusterDelData::default_instance_->InitAsDefaultInstance();
  ClusterMessage::default_instance_->InitAsDefaultInstance();
  ClientPutReq::default_instance_->InitAsDefaultInstance();
  ClientPutRes::default_instance_->InitAsDefaultInstance();
  ClientGetReq::default_instance_->InitAsDefaultInstance();
  ClientGetRes::default_instance_->InitAsDefaultInstance();
  ClientDelReq::default_instance_->InitAsDefaultInstance();
  ClientDelRes::default_instance_->InitAsDefaultInstance();
  ClientKeysReq::default_instance_->InitAsDefaultInstance();
  ClientKeysRes::default_instance_->InitAsDefaultInstance();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ClientResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_naming_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_naming_2eproto {
  StaticDescriptorInitializer_naming_2eproto() {
    protobuf_AddDesc_naming_2eproto();
  }
} static_descriptor_initializer_naming_2eproto_;
const ::google::protobuf::EnumDescriptor* ClusterOpcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterOpcode_descriptor_;
}
bool ClusterOpcode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientOpcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientOpcode_descriptor_;
}
bool ClientOpcode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValuePair::kKeyFieldNumber;
const int KeyValuePair::kValueFieldNumber;
const int KeyValuePair::kExpireFieldNumber;
#endif  // !_MSC_VER

KeyValuePair::KeyValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.KeyValuePair)
}

void KeyValuePair::InitAsDefaultInstance() {
}

KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:tinynet.naming.KeyValuePair)
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValuePair_descriptor_;
}

const KeyValuePair& KeyValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

KeyValuePair* KeyValuePair::default_instance_ = NULL;

KeyValuePair* KeyValuePair::New() const {
  return new KeyValuePair;
}

void KeyValuePair::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    expire_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.KeyValuePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expire;
        break;
      }

      // optional int64 expire = 3;
      case 3: {
        if (tag == 24) {
         parse_expire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_)));
          set_has_expire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.KeyValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.KeyValuePair)
  return false;
#undef DO_
}

void KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.KeyValuePair)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional int64 expire = 3;
  if (has_expire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.KeyValuePair)
}

::google::protobuf::uint8* KeyValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.KeyValuePair)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional int64 expire = 3;
  if (has_expire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.KeyValuePair)
  return target;
}

int KeyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int64 expire = 3;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_expire()) {
      set_expire(from.expire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {

  return true;
}

void KeyValuePair::Swap(KeyValuePair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(expire_, other->expire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValuePair_descriptor_;
  metadata.reflection = KeyValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotData::kDataFieldNumber;
#endif  // !_MSC_VER

SnapshotData::SnapshotData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.SnapshotData)
}

void SnapshotData::InitAsDefaultInstance() {
}

SnapshotData::SnapshotData(const SnapshotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.SnapshotData)
}

void SnapshotData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotData::~SnapshotData() {
  // @@protoc_insertion_point(destructor:tinynet.naming.SnapshotData)
  SharedDtor();
}

void SnapshotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotData_descriptor_;
}

const SnapshotData& SnapshotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

SnapshotData* SnapshotData::default_instance_ = NULL;

SnapshotData* SnapshotData::New() const {
  return new SnapshotData;
}

void SnapshotData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.SnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tinynet.naming.KeyValuePair data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.SnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.SnapshotData)
  return false;
#undef DO_
}

void SnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.SnapshotData)
  // repeated .tinynet.naming.KeyValuePair data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.SnapshotData)
}

::google::protobuf::uint8* SnapshotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.SnapshotData)
  // repeated .tinynet.naming.KeyValuePair data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.SnapshotData)
  return target;
}

int SnapshotData::ByteSize() const {
  int total_size = 0;

  // repeated .tinynet.naming.KeyValuePair data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotData::MergeFrom(const SnapshotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotData::CopyFrom(const SnapshotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotData::IsInitialized() const {

  return true;
}

void SnapshotData::Swap(SnapshotData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotData_descriptor_;
  metadata.reflection = SnapshotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterPutData::kKeyFieldNumber;
const int ClusterPutData::kValueFieldNumber;
const int ClusterPutData::kExpireFieldNumber;
#endif  // !_MSC_VER

ClusterPutData::ClusterPutData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClusterPutData)
}

void ClusterPutData::InitAsDefaultInstance() {
}

ClusterPutData::ClusterPutData(const ClusterPutData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClusterPutData)
}

void ClusterPutData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterPutData::~ClusterPutData() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClusterPutData)
  SharedDtor();
}

void ClusterPutData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ClusterPutData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterPutData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterPutData_descriptor_;
}

const ClusterPutData& ClusterPutData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClusterPutData* ClusterPutData::default_instance_ = NULL;

ClusterPutData* ClusterPutData::New() const {
  return new ClusterPutData;
}

void ClusterPutData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    expire_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterPutData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClusterPutData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expire;
        break;
      }

      // optional int64 expire = 3;
      case 3: {
        if (tag == 24) {
         parse_expire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_)));
          set_has_expire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClusterPutData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClusterPutData)
  return false;
#undef DO_
}

void ClusterPutData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClusterPutData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional int64 expire = 3;
  if (has_expire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClusterPutData)
}

::google::protobuf::uint8* ClusterPutData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClusterPutData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional int64 expire = 3;
  if (has_expire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClusterPutData)
  return target;
}

int ClusterPutData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int64 expire = 3;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterPutData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterPutData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterPutData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterPutData::MergeFrom(const ClusterPutData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_expire()) {
      set_expire(from.expire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterPutData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterPutData::CopyFrom(const ClusterPutData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterPutData::IsInitialized() const {

  return true;
}

void ClusterPutData::Swap(ClusterPutData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(expire_, other->expire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterPutData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterPutData_descriptor_;
  metadata.reflection = ClusterPutData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterDelData::kKeyFieldNumber;
#endif  // !_MSC_VER

ClusterDelData::ClusterDelData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClusterDelData)
}

void ClusterDelData::InitAsDefaultInstance() {
}

ClusterDelData::ClusterDelData(const ClusterDelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClusterDelData)
}

void ClusterDelData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterDelData::~ClusterDelData() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClusterDelData)
  SharedDtor();
}

void ClusterDelData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ClusterDelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterDelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterDelData_descriptor_;
}

const ClusterDelData& ClusterDelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClusterDelData* ClusterDelData::default_instance_ = NULL;

ClusterDelData* ClusterDelData::New() const {
  return new ClusterDelData;
}

void ClusterDelData::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterDelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClusterDelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClusterDelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClusterDelData)
  return false;
#undef DO_
}

void ClusterDelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClusterDelData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClusterDelData)
}

::google::protobuf::uint8* ClusterDelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClusterDelData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClusterDelData)
  return target;
}

int ClusterDelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterDelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterDelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterDelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterDelData::MergeFrom(const ClusterDelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterDelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterDelData::CopyFrom(const ClusterDelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterDelData::IsInitialized() const {

  return true;
}

void ClusterDelData::Swap(ClusterDelData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterDelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterDelData_descriptor_;
  metadata.reflection = ClusterDelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterMessage::kOpcodeFieldNumber;
const int ClusterMessage::kPutDataFieldNumber;
const int ClusterMessage::kDelDataFieldNumber;
#endif  // !_MSC_VER

ClusterMessage::ClusterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClusterMessage)
}

void ClusterMessage::InitAsDefaultInstance() {
  put_data_ = const_cast< ::tinynet::naming::ClusterPutData*>(&::tinynet::naming::ClusterPutData::default_instance());
  del_data_ = const_cast< ::tinynet::naming::ClusterDelData*>(&::tinynet::naming::ClusterDelData::default_instance());
}

ClusterMessage::ClusterMessage(const ClusterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClusterMessage)
}

void ClusterMessage::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 1;
  put_data_ = NULL;
  del_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterMessage::~ClusterMessage() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClusterMessage)
  SharedDtor();
}

void ClusterMessage::SharedDtor() {
  if (this != default_instance_) {
    delete put_data_;
    delete del_data_;
  }
}

void ClusterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterMessage_descriptor_;
}

const ClusterMessage& ClusterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClusterMessage* ClusterMessage::default_instance_ = NULL;

ClusterMessage* ClusterMessage::New() const {
  return new ClusterMessage;
}

void ClusterMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    opcode_ = 1;
    if (has_put_data()) {
      if (put_data_ != NULL) put_data_->::tinynet::naming::ClusterPutData::Clear();
    }
    if (has_del_data()) {
      if (del_data_ != NULL) del_data_->::tinynet::naming::ClusterDelData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClusterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tinynet.naming.ClusterOpcode opcode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tinynet::naming::ClusterOpcode_IsValid(value)) {
            set_opcode(static_cast< ::tinynet::naming::ClusterOpcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_put_data;
        break;
      }

      // optional .tinynet.naming.ClusterPutData put_data = 2;
      case 2: {
        if (tag == 18) {
         parse_put_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_del_data;
        break;
      }

      // optional .tinynet.naming.ClusterDelData del_data = 3;
      case 3: {
        if (tag == 26) {
         parse_del_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClusterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClusterMessage)
  return false;
#undef DO_
}

void ClusterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClusterMessage)
  // optional .tinynet.naming.ClusterOpcode opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opcode(), output);
  }

  // optional .tinynet.naming.ClusterPutData put_data = 2;
  if (has_put_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->put_data(), output);
  }

  // optional .tinynet.naming.ClusterDelData del_data = 3;
  if (has_del_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->del_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClusterMessage)
}

::google::protobuf::uint8* ClusterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClusterMessage)
  // optional .tinynet.naming.ClusterOpcode opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opcode(), target);
  }

  // optional .tinynet.naming.ClusterPutData put_data = 2;
  if (has_put_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->put_data(), target);
  }

  // optional .tinynet.naming.ClusterDelData del_data = 3;
  if (has_del_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->del_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClusterMessage)
  return target;
}

int ClusterMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tinynet.naming.ClusterOpcode opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }

    // optional .tinynet.naming.ClusterPutData put_data = 2;
    if (has_put_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_data());
    }

    // optional .tinynet.naming.ClusterDelData del_data = 3;
    if (has_del_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterMessage::MergeFrom(const ClusterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_put_data()) {
      mutable_put_data()->::tinynet::naming::ClusterPutData::MergeFrom(from.put_data());
    }
    if (from.has_del_data()) {
      mutable_del_data()->::tinynet::naming::ClusterDelData::MergeFrom(from.del_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterMessage::CopyFrom(const ClusterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterMessage::IsInitialized() const {

  return true;
}

void ClusterMessage::Swap(ClusterMessage* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(put_data_, other->put_data_);
    std::swap(del_data_, other->del_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterMessage_descriptor_;
  metadata.reflection = ClusterMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientPutReq::kKeyFieldNumber;
const int ClientPutReq::kValueFieldNumber;
const int ClientPutReq::kTtlFieldNumber;
#endif  // !_MSC_VER

ClientPutReq::ClientPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientPutReq)
}

void ClientPutReq::InitAsDefaultInstance() {
}

ClientPutReq::ClientPutReq(const ClientPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientPutReq)
}

void ClientPutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientPutReq::~ClientPutReq() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientPutReq)
  SharedDtor();
}

void ClientPutReq::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ClientPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPutReq_descriptor_;
}

const ClientPutReq& ClientPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientPutReq* ClientPutReq::default_instance_ = NULL;

ClientPutReq* ClientPutReq::New() const {
  return new ClientPutReq;
}

void ClientPutReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    ttl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ttl;
        break;
      }

      // optional int32 ttl = 3;
      case 3: {
        if (tag == 24) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientPutReq)
  return false;
#undef DO_
}

void ClientPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientPutReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional int32 ttl = 3;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ttl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientPutReq)
}

::google::protobuf::uint8* ClientPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientPutReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional int32 ttl = 3;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ttl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientPutReq)
  return target;
}

int ClientPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 ttl = 3;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientPutReq::MergeFrom(const ClientPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientPutReq::CopyFrom(const ClientPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPutReq::IsInitialized() const {

  return true;
}

void ClientPutReq::Swap(ClientPutReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(ttl_, other->ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientPutReq_descriptor_;
  metadata.reflection = ClientPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientPutRes::kKeyFieldNumber;
const int ClientPutRes::kValueFieldNumber;
const int ClientPutRes::kTtlFieldNumber;
#endif  // !_MSC_VER

ClientPutRes::ClientPutRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientPutRes)
}

void ClientPutRes::InitAsDefaultInstance() {
}

ClientPutRes::ClientPutRes(const ClientPutRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientPutRes)
}

void ClientPutRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientPutRes::~ClientPutRes() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientPutRes)
  SharedDtor();
}

void ClientPutRes::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ClientPutRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientPutRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPutRes_descriptor_;
}

const ClientPutRes& ClientPutRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientPutRes* ClientPutRes::default_instance_ = NULL;

ClientPutRes* ClientPutRes::New() const {
  return new ClientPutRes;
}

void ClientPutRes::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    ttl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientPutRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientPutRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ttl;
        break;
      }

      // optional int32 ttl = 3;
      case 3: {
        if (tag == 24) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientPutRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientPutRes)
  return false;
#undef DO_
}

void ClientPutRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientPutRes)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional int32 ttl = 3;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ttl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientPutRes)
}

::google::protobuf::uint8* ClientPutRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientPutRes)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional int32 ttl = 3;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ttl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientPutRes)
  return target;
}

int ClientPutRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 ttl = 3;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientPutRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientPutRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientPutRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientPutRes::MergeFrom(const ClientPutRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientPutRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientPutRes::CopyFrom(const ClientPutRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPutRes::IsInitialized() const {

  return true;
}

void ClientPutRes::Swap(ClientPutRes* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(ttl_, other->ttl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientPutRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientPutRes_descriptor_;
  metadata.reflection = ClientPutRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGetReq::kKeyFieldNumber;
#endif  // !_MSC_VER

ClientGetReq::ClientGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientGetReq)
}

void ClientGetReq::InitAsDefaultInstance() {
}

ClientGetReq::ClientGetReq(const ClientGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientGetReq)
}

void ClientGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGetReq::~ClientGetReq() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientGetReq)
  SharedDtor();
}

void ClientGetReq::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ClientGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGetReq_descriptor_;
}

const ClientGetReq& ClientGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientGetReq* ClientGetReq::default_instance_ = NULL;

ClientGetReq* ClientGetReq::New() const {
  return new ClientGetReq;
}

void ClientGetReq::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientGetReq)
  return false;
#undef DO_
}

void ClientGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientGetReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientGetReq)
}

::google::protobuf::uint8* ClientGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientGetReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientGetReq)
  return target;
}

int ClientGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGetReq::MergeFrom(const ClientGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGetReq::CopyFrom(const ClientGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGetReq::IsInitialized() const {

  return true;
}

void ClientGetReq::Swap(ClientGetReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGetReq_descriptor_;
  metadata.reflection = ClientGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGetRes::kKeyFieldNumber;
const int ClientGetRes::kValueFieldNumber;
#endif  // !_MSC_VER

ClientGetRes::ClientGetRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientGetRes)
}

void ClientGetRes::InitAsDefaultInstance() {
}

ClientGetRes::ClientGetRes(const ClientGetRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientGetRes)
}

void ClientGetRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGetRes::~ClientGetRes() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientGetRes)
  SharedDtor();
}

void ClientGetRes::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ClientGetRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGetRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGetRes_descriptor_;
}

const ClientGetRes& ClientGetRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientGetRes* ClientGetRes::default_instance_ = NULL;

ClientGetRes* ClientGetRes::New() const {
  return new ClientGetRes;
}

void ClientGetRes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientGetRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientGetRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientGetRes)
  return false;
#undef DO_
}

void ClientGetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientGetRes)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientGetRes)
}

::google::protobuf::uint8* ClientGetRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientGetRes)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientGetRes)
  return target;
}

int ClientGetRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGetRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGetRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGetRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGetRes::MergeFrom(const ClientGetRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGetRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGetRes::CopyFrom(const ClientGetRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGetRes::IsInitialized() const {

  return true;
}

void ClientGetRes::Swap(ClientGetRes* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGetRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGetRes_descriptor_;
  metadata.reflection = ClientGetRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientDelReq::kKeyFieldNumber;
#endif  // !_MSC_VER

ClientDelReq::ClientDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientDelReq)
}

void ClientDelReq::InitAsDefaultInstance() {
}

ClientDelReq::ClientDelReq(const ClientDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientDelReq)
}

void ClientDelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDelReq::~ClientDelReq() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientDelReq)
  SharedDtor();
}

void ClientDelReq::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ClientDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDelReq_descriptor_;
}

const ClientDelReq& ClientDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientDelReq* ClientDelReq::default_instance_ = NULL;

ClientDelReq* ClientDelReq::New() const {
  return new ClientDelReq;
}

void ClientDelReq::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientDelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientDelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientDelReq)
  return false;
#undef DO_
}

void ClientDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientDelReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientDelReq)
}

::google::protobuf::uint8* ClientDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientDelReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientDelReq)
  return target;
}

int ClientDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientDelReq::MergeFrom(const ClientDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDelReq::CopyFrom(const ClientDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDelReq::IsInitialized() const {

  return true;
}

void ClientDelReq::Swap(ClientDelReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDelReq_descriptor_;
  metadata.reflection = ClientDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientDelRes::kKeyFieldNumber;
#endif  // !_MSC_VER

ClientDelRes::ClientDelRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientDelRes)
}

void ClientDelRes::InitAsDefaultInstance() {
}

ClientDelRes::ClientDelRes(const ClientDelRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientDelRes)
}

void ClientDelRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDelRes::~ClientDelRes() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientDelRes)
  SharedDtor();
}

void ClientDelRes::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ClientDelRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDelRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDelRes_descriptor_;
}

const ClientDelRes& ClientDelRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientDelRes* ClientDelRes::default_instance_ = NULL;

ClientDelRes* ClientDelRes::New() const {
  return new ClientDelRes;
}

void ClientDelRes::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientDelRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientDelRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientDelRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientDelRes)
  return false;
#undef DO_
}

void ClientDelRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientDelRes)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientDelRes)
}

::google::protobuf::uint8* ClientDelRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientDelRes)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientDelRes)
  return target;
}

int ClientDelRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDelRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientDelRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientDelRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientDelRes::MergeFrom(const ClientDelRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientDelRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDelRes::CopyFrom(const ClientDelRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDelRes::IsInitialized() const {

  return true;
}

void ClientDelRes::Swap(ClientDelRes* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientDelRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDelRes_descriptor_;
  metadata.reflection = ClientDelRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientKeysReq::kKeyFieldNumber;
#endif  // !_MSC_VER

ClientKeysReq::ClientKeysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientKeysReq)
}

void ClientKeysReq::InitAsDefaultInstance() {
}

ClientKeysReq::ClientKeysReq(const ClientKeysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientKeysReq)
}

void ClientKeysReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientKeysReq::~ClientKeysReq() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientKeysReq)
  SharedDtor();
}

void ClientKeysReq::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ClientKeysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientKeysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientKeysReq_descriptor_;
}

const ClientKeysReq& ClientKeysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientKeysReq* ClientKeysReq::default_instance_ = NULL;

ClientKeysReq* ClientKeysReq::New() const {
  return new ClientKeysReq;
}

void ClientKeysReq::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientKeysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientKeysReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientKeysReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientKeysReq)
  return false;
#undef DO_
}

void ClientKeysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientKeysReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientKeysReq)
}

::google::protobuf::uint8* ClientKeysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientKeysReq)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientKeysReq)
  return target;
}

int ClientKeysReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientKeysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientKeysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientKeysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientKeysReq::MergeFrom(const ClientKeysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientKeysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientKeysReq::CopyFrom(const ClientKeysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientKeysReq::IsInitialized() const {

  return true;
}

void ClientKeysReq::Swap(ClientKeysReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientKeysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientKeysReq_descriptor_;
  metadata.reflection = ClientKeysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientKeysRes::kKeysFieldNumber;
#endif  // !_MSC_VER

ClientKeysRes::ClientKeysRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientKeysRes)
}

void ClientKeysRes::InitAsDefaultInstance() {
}

ClientKeysRes::ClientKeysRes(const ClientKeysRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientKeysRes)
}

void ClientKeysRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientKeysRes::~ClientKeysRes() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientKeysRes)
  SharedDtor();
}

void ClientKeysRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientKeysRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientKeysRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientKeysRes_descriptor_;
}

const ClientKeysRes& ClientKeysRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientKeysRes* ClientKeysRes::default_instance_ = NULL;

ClientKeysRes* ClientKeysRes::New() const {
  return new ClientKeysRes;
}

void ClientKeysRes::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientKeysRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientKeysRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keys");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientKeysRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientKeysRes)
  return false;
#undef DO_
}

void ClientKeysRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientKeysRes)
  // repeated string keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientKeysRes)
}

::google::protobuf::uint8* ClientKeysRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientKeysRes)
  // repeated string keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientKeysRes)
  return target;
}

int ClientKeysRes::ByteSize() const {
  int total_size = 0;

  // repeated string keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientKeysRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientKeysRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientKeysRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientKeysRes::MergeFrom(const ClientKeysRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientKeysRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientKeysRes::CopyFrom(const ClientKeysRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientKeysRes::IsInitialized() const {

  return true;
}

void ClientKeysRes::Swap(ClientKeysRes* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientKeysRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientKeysRes_descriptor_;
  metadata.reflection = ClientKeysRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRequest::kOpcodeFieldNumber;
const int ClientRequest::kPutReqFieldNumber;
const int ClientRequest::kGetReqFieldNumber;
const int ClientRequest::kDelReqFieldNumber;
const int ClientRequest::kKeysReqFieldNumber;
#endif  // !_MSC_VER

ClientRequest::ClientRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientRequest)
}

void ClientRequest::InitAsDefaultInstance() {
  put_req_ = const_cast< ::tinynet::naming::ClientPutReq*>(&::tinynet::naming::ClientPutReq::default_instance());
  get_req_ = const_cast< ::tinynet::naming::ClientGetReq*>(&::tinynet::naming::ClientGetReq::default_instance());
  del_req_ = const_cast< ::tinynet::naming::ClientDelReq*>(&::tinynet::naming::ClientDelReq::default_instance());
  keys_req_ = const_cast< ::tinynet::naming::ClientKeysReq*>(&::tinynet::naming::ClientKeysReq::default_instance());
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientRequest)
}

void ClientRequest::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 1;
  put_req_ = NULL;
  get_req_ = NULL;
  del_req_ = NULL;
  keys_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (this != default_instance_) {
    delete put_req_;
    delete get_req_;
    delete del_req_;
    delete keys_req_;
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_descriptor_;
}

const ClientRequest& ClientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New() const {
  return new ClientRequest;
}

void ClientRequest::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    opcode_ = 1;
    if (has_put_req()) {
      if (put_req_ != NULL) put_req_->::tinynet::naming::ClientPutReq::Clear();
    }
    if (has_get_req()) {
      if (get_req_ != NULL) get_req_->::tinynet::naming::ClientGetReq::Clear();
    }
    if (has_del_req()) {
      if (del_req_ != NULL) del_req_->::tinynet::naming::ClientDelReq::Clear();
    }
    if (has_keys_req()) {
      if (keys_req_ != NULL) keys_req_->::tinynet::naming::ClientKeysReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tinynet.naming.ClientOpcode opcode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tinynet::naming::ClientOpcode_IsValid(value)) {
            set_opcode(static_cast< ::tinynet::naming::ClientOpcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_put_req;
        break;
      }

      // optional .tinynet.naming.ClientPutReq put_req = 2;
      case 2: {
        if (tag == 18) {
         parse_put_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_req;
        break;
      }

      // optional .tinynet.naming.ClientGetReq get_req = 3;
      case 3: {
        if (tag == 26) {
         parse_get_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_del_req;
        break;
      }

      // optional .tinynet.naming.ClientDelReq del_req = 4;
      case 4: {
        if (tag == 34) {
         parse_del_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keys_req;
        break;
      }

      // optional .tinynet.naming.ClientKeysReq keys_req = 5;
      case 5: {
        if (tag == 42) {
         parse_keys_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keys_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientRequest)
  // optional .tinynet.naming.ClientOpcode opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opcode(), output);
  }

  // optional .tinynet.naming.ClientPutReq put_req = 2;
  if (has_put_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->put_req(), output);
  }

  // optional .tinynet.naming.ClientGetReq get_req = 3;
  if (has_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_req(), output);
  }

  // optional .tinynet.naming.ClientDelReq del_req = 4;
  if (has_del_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->del_req(), output);
  }

  // optional .tinynet.naming.ClientKeysReq keys_req = 5;
  if (has_keys_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->keys_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientRequest)
}

::google::protobuf::uint8* ClientRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientRequest)
  // optional .tinynet.naming.ClientOpcode opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opcode(), target);
  }

  // optional .tinynet.naming.ClientPutReq put_req = 2;
  if (has_put_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->put_req(), target);
  }

  // optional .tinynet.naming.ClientGetReq get_req = 3;
  if (has_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_req(), target);
  }

  // optional .tinynet.naming.ClientDelReq del_req = 4;
  if (has_del_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->del_req(), target);
  }

  // optional .tinynet.naming.ClientKeysReq keys_req = 5;
  if (has_keys_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->keys_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientRequest)
  return target;
}

int ClientRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tinynet.naming.ClientOpcode opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }

    // optional .tinynet.naming.ClientPutReq put_req = 2;
    if (has_put_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_req());
    }

    // optional .tinynet.naming.ClientGetReq get_req = 3;
    if (has_get_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_req());
    }

    // optional .tinynet.naming.ClientDelReq del_req = 4;
    if (has_del_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_req());
    }

    // optional .tinynet.naming.ClientKeysReq keys_req = 5;
    if (has_keys_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_put_req()) {
      mutable_put_req()->::tinynet::naming::ClientPutReq::MergeFrom(from.put_req());
    }
    if (from.has_get_req()) {
      mutable_get_req()->::tinynet::naming::ClientGetReq::MergeFrom(from.get_req());
    }
    if (from.has_del_req()) {
      mutable_del_req()->::tinynet::naming::ClientDelReq::MergeFrom(from.del_req());
    }
    if (from.has_keys_req()) {
      mutable_keys_req()->::tinynet::naming::ClientKeysReq::MergeFrom(from.keys_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {

  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(put_req_, other->put_req_);
    std::swap(get_req_, other->get_req_);
    std::swap(del_req_, other->del_req_);
    std::swap(keys_req_, other->keys_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_descriptor_;
  metadata.reflection = ClientRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientResponse::kErrorCodeFieldNumber;
const int ClientResponse::kRedirectFieldNumber;
const int ClientResponse::kOpcodeFieldNumber;
const int ClientResponse::kPutResFieldNumber;
const int ClientResponse::kGetResFieldNumber;
const int ClientResponse::kDelResFieldNumber;
const int ClientResponse::kKeysResFieldNumber;
#endif  // !_MSC_VER

ClientResponse::ClientResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.naming.ClientResponse)
}

void ClientResponse::InitAsDefaultInstance() {
  put_res_ = const_cast< ::tinynet::naming::ClientPutRes*>(&::tinynet::naming::ClientPutRes::default_instance());
  get_res_ = const_cast< ::tinynet::naming::ClientGetRes*>(&::tinynet::naming::ClientGetRes::default_instance());
  del_res_ = const_cast< ::tinynet::naming::ClientDelRes*>(&::tinynet::naming::ClientDelRes::default_instance());
  keys_res_ = const_cast< ::tinynet::naming::ClientKeysRes*>(&::tinynet::naming::ClientKeysRes::default_instance());
}

ClientResponse::ClientResponse(const ClientResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.naming.ClientResponse)
}

void ClientResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = -5702;
  redirect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opcode_ = 1;
  put_res_ = NULL;
  get_res_ = NULL;
  del_res_ = NULL;
  keys_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientResponse::~ClientResponse() {
  // @@protoc_insertion_point(destructor:tinynet.naming.ClientResponse)
  SharedDtor();
}

void ClientResponse::SharedDtor() {
  if (redirect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redirect_;
  }
  if (this != default_instance_) {
    delete put_res_;
    delete get_res_;
    delete del_res_;
    delete keys_res_;
  }
}

void ClientResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResponse_descriptor_;
}

const ClientResponse& ClientResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_naming_2eproto();
  return *default_instance_;
}

ClientResponse* ClientResponse::default_instance_ = NULL;

ClientResponse* ClientResponse::New() const {
  return new ClientResponse;
}

void ClientResponse::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    error_code_ = -5702;
    if (has_redirect()) {
      if (redirect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        redirect_->clear();
      }
    }
    opcode_ = 1;
    if (has_put_res()) {
      if (put_res_ != NULL) put_res_->::tinynet::naming::ClientPutRes::Clear();
    }
    if (has_get_res()) {
      if (get_res_ != NULL) get_res_->::tinynet::naming::ClientGetRes::Clear();
    }
    if (has_del_res()) {
      if (del_res_ != NULL) del_res_->::tinynet::naming::ClientDelRes::Clear();
    }
    if (has_keys_res()) {
      if (keys_res_ != NULL) keys_res_->::tinynet::naming::ClientKeysRes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.naming.ClientResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1 [default = -5702];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_redirect;
        break;
      }

      // optional string redirect = 2;
      case 2: {
        if (tag == 18) {
         parse_redirect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect().data(), this->redirect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "redirect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opcode;
        break;
      }

      // optional .tinynet.naming.ClientOpcode opcode = 3;
      case 3: {
        if (tag == 24) {
         parse_opcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tinynet::naming::ClientOpcode_IsValid(value)) {
            set_opcode(static_cast< ::tinynet::naming::ClientOpcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put_res;
        break;
      }

      // optional .tinynet.naming.ClientPutRes put_res = 4;
      case 4: {
        if (tag == 34) {
         parse_put_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_get_res;
        break;
      }

      // optional .tinynet.naming.ClientGetRes get_res = 5;
      case 5: {
        if (tag == 42) {
         parse_get_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_del_res;
        break;
      }

      // optional .tinynet.naming.ClientDelRes del_res = 6;
      case 6: {
        if (tag == 50) {
         parse_del_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_keys_res;
        break;
      }

      // optional .tinynet.naming.ClientKeysRes keys_res = 7;
      case 7: {
        if (tag == 58) {
         parse_keys_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keys_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.naming.ClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.naming.ClientResponse)
  return false;
#undef DO_
}

void ClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.naming.ClientResponse)
  // optional int32 error_code = 1 [default = -5702];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string redirect = 2;
  if (has_redirect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), this->redirect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect(), output);
  }

  // optional .tinynet.naming.ClientOpcode opcode = 3;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opcode(), output);
  }

  // optional .tinynet.naming.ClientPutRes put_res = 4;
  if (has_put_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->put_res(), output);
  }

  // optional .tinynet.naming.ClientGetRes get_res = 5;
  if (has_get_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_res(), output);
  }

  // optional .tinynet.naming.ClientDelRes del_res = 6;
  if (has_del_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->del_res(), output);
  }

  // optional .tinynet.naming.ClientKeysRes keys_res = 7;
  if (has_keys_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->keys_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.naming.ClientResponse)
}

::google::protobuf::uint8* ClientResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.naming.ClientResponse)
  // optional int32 error_code = 1 [default = -5702];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional string redirect = 2;
  if (has_redirect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), this->redirect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect(), target);
  }

  // optional .tinynet.naming.ClientOpcode opcode = 3;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opcode(), target);
  }

  // optional .tinynet.naming.ClientPutRes put_res = 4;
  if (has_put_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->put_res(), target);
  }

  // optional .tinynet.naming.ClientGetRes get_res = 5;
  if (has_get_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->get_res(), target);
  }

  // optional .tinynet.naming.ClientDelRes del_res = 6;
  if (has_del_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->del_res(), target);
  }

  // optional .tinynet.naming.ClientKeysRes keys_res = 7;
  if (has_keys_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->keys_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.naming.ClientResponse)
  return target;
}

int ClientResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1 [default = -5702];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string redirect = 2;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect());
    }

    // optional .tinynet.naming.ClientOpcode opcode = 3;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }

    // optional .tinynet.naming.ClientPutRes put_res = 4;
    if (has_put_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_res());
    }

    // optional .tinynet.naming.ClientGetRes get_res = 5;
    if (has_get_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_res());
    }

    // optional .tinynet.naming.ClientDelRes del_res = 6;
    if (has_del_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_res());
    }

    // optional .tinynet.naming.ClientKeysRes keys_res = 7;
    if (has_keys_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientResponse::MergeFrom(const ClientResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_redirect()) {
      set_redirect(from.redirect());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_put_res()) {
      mutable_put_res()->::tinynet::naming::ClientPutRes::MergeFrom(from.put_res());
    }
    if (from.has_get_res()) {
      mutable_get_res()->::tinynet::naming::ClientGetRes::MergeFrom(from.get_res());
    }
    if (from.has_del_res()) {
      mutable_del_res()->::tinynet::naming::ClientDelRes::MergeFrom(from.del_res());
    }
    if (from.has_keys_res()) {
      mutable_keys_res()->::tinynet::naming::ClientKeysRes::MergeFrom(from.keys_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResponse::CopyFrom(const ClientResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResponse::IsInitialized() const {

  return true;
}

void ClientResponse::Swap(ClientResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(redirect_, other->redirect_);
    std::swap(opcode_, other->opcode_);
    std::swap(put_res_, other->put_res_);
    std::swap(get_res_, other->get_res_);
    std::swap(del_res_, other->del_res_);
    std::swap(keys_res_, other->keys_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientResponse_descriptor_;
  metadata.reflection = ClientResponse_reflection_;
  return metadata;
}


// ===================================================================

NamingRpcService::~NamingRpcService() {}

const ::google::protobuf::ServiceDescriptor* NamingRpcService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamingRpcService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* NamingRpcService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamingRpcService_descriptor_;
}

void NamingRpcService::Invoke(::google::protobuf::RpcController* controller,
                         const ::tinynet::naming::ClientRequest*,
                         ::tinynet::naming::ClientResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Invoke() not implemented.");
  done->Run();
}

void NamingRpcService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), NamingRpcService_descriptor_);
  switch(method->index()) {
    case 0:
      Invoke(controller,
             ::google::protobuf::down_cast<const ::tinynet::naming::ClientRequest*>(request),
             ::google::protobuf::down_cast< ::tinynet::naming::ClientResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& NamingRpcService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tinynet::naming::ClientRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& NamingRpcService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tinynet::naming::ClientResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

NamingRpcService_Stub::NamingRpcService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
NamingRpcService_Stub::NamingRpcService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
NamingRpcService_Stub::~NamingRpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void NamingRpcService_Stub::Invoke(::google::protobuf::RpcController* controller,
                              const ::tinynet::naming::ClientRequest* request,
                              ::tinynet::naming::ClientResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace naming
}  // namespace tinynet

// @@protoc_insertion_point(global_scope)
