// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: naming.proto

#ifndef PROTOBUF_naming_2eproto__INCLUDED
#define PROTOBUF_naming_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tinynet {
namespace naming {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_naming_2eproto();
void protobuf_AssignDesc_naming_2eproto();
void protobuf_ShutdownFile_naming_2eproto();

class KeyValuePair;
class SnapshotData;
class ClusterPutData;
class ClusterDelData;
class ClusterMessage;
class ClientPutReq;
class ClientPutRes;
class ClientGetReq;
class ClientGetRes;
class ClientDelReq;
class ClientDelRes;
class ClientKeysReq;
class ClientKeysRes;
class ClientRequest;
class ClientResponse;

enum ClusterOpcode {
  PUT_DATA = 1,
  DEL_DATA = 2
};
bool ClusterOpcode_IsValid(int value);
const ClusterOpcode ClusterOpcode_MIN = PUT_DATA;
const ClusterOpcode ClusterOpcode_MAX = DEL_DATA;
const int ClusterOpcode_ARRAYSIZE = ClusterOpcode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClusterOpcode_descriptor();
inline const ::std::string& ClusterOpcode_Name(ClusterOpcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusterOpcode_descriptor(), value);
}
inline bool ClusterOpcode_Parse(
    const ::std::string& name, ClusterOpcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusterOpcode>(
    ClusterOpcode_descriptor(), name, value);
}
enum ClientOpcode {
  GET_REQ = 1,
  GET_RES = 2,
  PUT_REQ = 3,
  PUT_RES = 4,
  DEL_REQ = 5,
  DEL_RES = 6,
  KEYS_REQ = 7,
  KEYS_RES = 8
};
bool ClientOpcode_IsValid(int value);
const ClientOpcode ClientOpcode_MIN = GET_REQ;
const ClientOpcode ClientOpcode_MAX = KEYS_RES;
const int ClientOpcode_ARRAYSIZE = ClientOpcode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientOpcode_descriptor();
inline const ::std::string& ClientOpcode_Name(ClientOpcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientOpcode_descriptor(), value);
}
inline bool ClientOpcode_Parse(
    const ::std::string& name, ClientOpcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientOpcode>(
    ClientOpcode_descriptor(), name, value);
}
// ===================================================================

class KeyValuePair : public ::google::protobuf::Message {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValuePair& default_instance();

  void Swap(KeyValuePair* other);

  // implements Message ----------------------------------------------

  KeyValuePair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int64 expire = 3;
  inline bool has_expire() const;
  inline void clear_expire();
  static const int kExpireFieldNumber = 3;
  inline ::google::protobuf::int64 expire() const;
  inline void set_expire(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tinynet.naming.KeyValuePair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_expire();
  inline void clear_has_expire();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::int64 expire_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static KeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotData : public ::google::protobuf::Message {
 public:
  SnapshotData();
  virtual ~SnapshotData();

  SnapshotData(const SnapshotData& from);

  inline SnapshotData& operator=(const SnapshotData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotData& default_instance();

  void Swap(SnapshotData* other);

  // implements Message ----------------------------------------------

  SnapshotData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotData& from);
  void MergeFrom(const SnapshotData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tinynet.naming.KeyValuePair data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::tinynet::naming::KeyValuePair& data(int index) const;
  inline ::tinynet::naming::KeyValuePair* mutable_data(int index);
  inline ::tinynet::naming::KeyValuePair* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::tinynet::naming::KeyValuePair >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinynet::naming::KeyValuePair >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:tinynet.naming.SnapshotData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tinynet::naming::KeyValuePair > data_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static SnapshotData* default_instance_;
};
// -------------------------------------------------------------------

class ClusterPutData : public ::google::protobuf::Message {
 public:
  ClusterPutData();
  virtual ~ClusterPutData();

  ClusterPutData(const ClusterPutData& from);

  inline ClusterPutData& operator=(const ClusterPutData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterPutData& default_instance();

  void Swap(ClusterPutData* other);

  // implements Message ----------------------------------------------

  ClusterPutData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterPutData& from);
  void MergeFrom(const ClusterPutData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int64 expire = 3;
  inline bool has_expire() const;
  inline void clear_expire();
  static const int kExpireFieldNumber = 3;
  inline ::google::protobuf::int64 expire() const;
  inline void set_expire(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClusterPutData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_expire();
  inline void clear_has_expire();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::int64 expire_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClusterPutData* default_instance_;
};
// -------------------------------------------------------------------

class ClusterDelData : public ::google::protobuf::Message {
 public:
  ClusterDelData();
  virtual ~ClusterDelData();

  ClusterDelData(const ClusterDelData& from);

  inline ClusterDelData& operator=(const ClusterDelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterDelData& default_instance();

  void Swap(ClusterDelData* other);

  // implements Message ----------------------------------------------

  ClusterDelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterDelData& from);
  void MergeFrom(const ClusterDelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClusterDelData)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClusterDelData* default_instance_;
};
// -------------------------------------------------------------------

class ClusterMessage : public ::google::protobuf::Message {
 public:
  ClusterMessage();
  virtual ~ClusterMessage();

  ClusterMessage(const ClusterMessage& from);

  inline ClusterMessage& operator=(const ClusterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterMessage& default_instance();

  void Swap(ClusterMessage* other);

  // implements Message ----------------------------------------------

  ClusterMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterMessage& from);
  void MergeFrom(const ClusterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tinynet.naming.ClusterOpcode opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::tinynet::naming::ClusterOpcode opcode() const;
  inline void set_opcode(::tinynet::naming::ClusterOpcode value);

  // optional .tinynet.naming.ClusterPutData put_data = 2;
  inline bool has_put_data() const;
  inline void clear_put_data();
  static const int kPutDataFieldNumber = 2;
  inline const ::tinynet::naming::ClusterPutData& put_data() const;
  inline ::tinynet::naming::ClusterPutData* mutable_put_data();
  inline ::tinynet::naming::ClusterPutData* release_put_data();
  inline void set_allocated_put_data(::tinynet::naming::ClusterPutData* put_data);

  // optional .tinynet.naming.ClusterDelData del_data = 3;
  inline bool has_del_data() const;
  inline void clear_del_data();
  static const int kDelDataFieldNumber = 3;
  inline const ::tinynet::naming::ClusterDelData& del_data() const;
  inline ::tinynet::naming::ClusterDelData* mutable_del_data();
  inline ::tinynet::naming::ClusterDelData* release_del_data();
  inline void set_allocated_del_data(::tinynet::naming::ClusterDelData* del_data);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClusterMessage)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_put_data();
  inline void clear_has_put_data();
  inline void set_has_del_data();
  inline void clear_has_del_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tinynet::naming::ClusterPutData* put_data_;
  ::tinynet::naming::ClusterDelData* del_data_;
  int opcode_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClusterMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientPutReq : public ::google::protobuf::Message {
 public:
  ClientPutReq();
  virtual ~ClientPutReq();

  ClientPutReq(const ClientPutReq& from);

  inline ClientPutReq& operator=(const ClientPutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientPutReq& default_instance();

  void Swap(ClientPutReq* other);

  // implements Message ----------------------------------------------

  ClientPutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientPutReq& from);
  void MergeFrom(const ClientPutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int32 ttl = 3;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 3;
  inline ::google::protobuf::int32 ttl() const;
  inline void set_ttl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientPutReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ttl();
  inline void clear_has_ttl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::int32 ttl_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientPutReq* default_instance_;
};
// -------------------------------------------------------------------

class ClientPutRes : public ::google::protobuf::Message {
 public:
  ClientPutRes();
  virtual ~ClientPutRes();

  ClientPutRes(const ClientPutRes& from);

  inline ClientPutRes& operator=(const ClientPutRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientPutRes& default_instance();

  void Swap(ClientPutRes* other);

  // implements Message ----------------------------------------------

  ClientPutRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientPutRes& from);
  void MergeFrom(const ClientPutRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int32 ttl = 3;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 3;
  inline ::google::protobuf::int32 ttl() const;
  inline void set_ttl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientPutRes)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ttl();
  inline void clear_has_ttl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::int32 ttl_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientPutRes* default_instance_;
};
// -------------------------------------------------------------------

class ClientGetReq : public ::google::protobuf::Message {
 public:
  ClientGetReq();
  virtual ~ClientGetReq();

  ClientGetReq(const ClientGetReq& from);

  inline ClientGetReq& operator=(const ClientGetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientGetReq& default_instance();

  void Swap(ClientGetReq* other);

  // implements Message ----------------------------------------------

  ClientGetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientGetReq& from);
  void MergeFrom(const ClientGetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientGetReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientGetReq* default_instance_;
};
// -------------------------------------------------------------------

class ClientGetRes : public ::google::protobuf::Message {
 public:
  ClientGetRes();
  virtual ~ClientGetRes();

  ClientGetRes(const ClientGetRes& from);

  inline ClientGetRes& operator=(const ClientGetRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientGetRes& default_instance();

  void Swap(ClientGetRes* other);

  // implements Message ----------------------------------------------

  ClientGetRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientGetRes& from);
  void MergeFrom(const ClientGetRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientGetRes)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientGetRes* default_instance_;
};
// -------------------------------------------------------------------

class ClientDelReq : public ::google::protobuf::Message {
 public:
  ClientDelReq();
  virtual ~ClientDelReq();

  ClientDelReq(const ClientDelReq& from);

  inline ClientDelReq& operator=(const ClientDelReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientDelReq& default_instance();

  void Swap(ClientDelReq* other);

  // implements Message ----------------------------------------------

  ClientDelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientDelReq& from);
  void MergeFrom(const ClientDelReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientDelReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientDelReq* default_instance_;
};
// -------------------------------------------------------------------

class ClientDelRes : public ::google::protobuf::Message {
 public:
  ClientDelRes();
  virtual ~ClientDelRes();

  ClientDelRes(const ClientDelRes& from);

  inline ClientDelRes& operator=(const ClientDelRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientDelRes& default_instance();

  void Swap(ClientDelRes* other);

  // implements Message ----------------------------------------------

  ClientDelRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientDelRes& from);
  void MergeFrom(const ClientDelRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientDelRes)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientDelRes* default_instance_;
};
// -------------------------------------------------------------------

class ClientKeysReq : public ::google::protobuf::Message {
 public:
  ClientKeysReq();
  virtual ~ClientKeysReq();

  ClientKeysReq(const ClientKeysReq& from);

  inline ClientKeysReq& operator=(const ClientKeysReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientKeysReq& default_instance();

  void Swap(ClientKeysReq* other);

  // implements Message ----------------------------------------------

  ClientKeysReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientKeysReq& from);
  void MergeFrom(const ClientKeysReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientKeysReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientKeysReq* default_instance_;
};
// -------------------------------------------------------------------

class ClientKeysRes : public ::google::protobuf::Message {
 public:
  ClientKeysRes();
  virtual ~ClientKeysRes();

  ClientKeysRes(const ClientKeysRes& from);

  inline ClientKeysRes& operator=(const ClientKeysRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientKeysRes& default_instance();

  void Swap(ClientKeysRes* other);

  // implements Message ----------------------------------------------

  ClientKeysRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientKeysRes& from);
  void MergeFrom(const ClientKeysRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 1;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientKeysRes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientKeysRes* default_instance_;
};
// -------------------------------------------------------------------

class ClientRequest : public ::google::protobuf::Message {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  void Swap(ClientRequest* other);

  // implements Message ----------------------------------------------

  ClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tinynet.naming.ClientOpcode opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::tinynet::naming::ClientOpcode opcode() const;
  inline void set_opcode(::tinynet::naming::ClientOpcode value);

  // optional .tinynet.naming.ClientPutReq put_req = 2;
  inline bool has_put_req() const;
  inline void clear_put_req();
  static const int kPutReqFieldNumber = 2;
  inline const ::tinynet::naming::ClientPutReq& put_req() const;
  inline ::tinynet::naming::ClientPutReq* mutable_put_req();
  inline ::tinynet::naming::ClientPutReq* release_put_req();
  inline void set_allocated_put_req(::tinynet::naming::ClientPutReq* put_req);

  // optional .tinynet.naming.ClientGetReq get_req = 3;
  inline bool has_get_req() const;
  inline void clear_get_req();
  static const int kGetReqFieldNumber = 3;
  inline const ::tinynet::naming::ClientGetReq& get_req() const;
  inline ::tinynet::naming::ClientGetReq* mutable_get_req();
  inline ::tinynet::naming::ClientGetReq* release_get_req();
  inline void set_allocated_get_req(::tinynet::naming::ClientGetReq* get_req);

  // optional .tinynet.naming.ClientDelReq del_req = 4;
  inline bool has_del_req() const;
  inline void clear_del_req();
  static const int kDelReqFieldNumber = 4;
  inline const ::tinynet::naming::ClientDelReq& del_req() const;
  inline ::tinynet::naming::ClientDelReq* mutable_del_req();
  inline ::tinynet::naming::ClientDelReq* release_del_req();
  inline void set_allocated_del_req(::tinynet::naming::ClientDelReq* del_req);

  // optional .tinynet.naming.ClientKeysReq keys_req = 5;
  inline bool has_keys_req() const;
  inline void clear_keys_req();
  static const int kKeysReqFieldNumber = 5;
  inline const ::tinynet::naming::ClientKeysReq& keys_req() const;
  inline ::tinynet::naming::ClientKeysReq* mutable_keys_req();
  inline ::tinynet::naming::ClientKeysReq* release_keys_req();
  inline void set_allocated_keys_req(::tinynet::naming::ClientKeysReq* keys_req);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientRequest)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_put_req();
  inline void clear_has_put_req();
  inline void set_has_get_req();
  inline void clear_has_get_req();
  inline void set_has_del_req();
  inline void clear_has_del_req();
  inline void set_has_keys_req();
  inline void clear_has_keys_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tinynet::naming::ClientPutReq* put_req_;
  ::tinynet::naming::ClientGetReq* get_req_;
  ::tinynet::naming::ClientDelReq* del_req_;
  ::tinynet::naming::ClientKeysReq* keys_req_;
  int opcode_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClientResponse : public ::google::protobuf::Message {
 public:
  ClientResponse();
  virtual ~ClientResponse();

  ClientResponse(const ClientResponse& from);

  inline ClientResponse& operator=(const ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientResponse& default_instance();

  void Swap(ClientResponse* other);

  // implements Message ----------------------------------------------

  ClientResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientResponse& from);
  void MergeFrom(const ClientResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error_code = 1 [default = -5702];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional string redirect = 2;
  inline bool has_redirect() const;
  inline void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  inline const ::std::string& redirect() const;
  inline void set_redirect(const ::std::string& value);
  inline void set_redirect(const char* value);
  inline void set_redirect(const char* value, size_t size);
  inline ::std::string* mutable_redirect();
  inline ::std::string* release_redirect();
  inline void set_allocated_redirect(::std::string* redirect);

  // optional .tinynet.naming.ClientOpcode opcode = 3;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 3;
  inline ::tinynet::naming::ClientOpcode opcode() const;
  inline void set_opcode(::tinynet::naming::ClientOpcode value);

  // optional .tinynet.naming.ClientPutRes put_res = 4;
  inline bool has_put_res() const;
  inline void clear_put_res();
  static const int kPutResFieldNumber = 4;
  inline const ::tinynet::naming::ClientPutRes& put_res() const;
  inline ::tinynet::naming::ClientPutRes* mutable_put_res();
  inline ::tinynet::naming::ClientPutRes* release_put_res();
  inline void set_allocated_put_res(::tinynet::naming::ClientPutRes* put_res);

  // optional .tinynet.naming.ClientGetRes get_res = 5;
  inline bool has_get_res() const;
  inline void clear_get_res();
  static const int kGetResFieldNumber = 5;
  inline const ::tinynet::naming::ClientGetRes& get_res() const;
  inline ::tinynet::naming::ClientGetRes* mutable_get_res();
  inline ::tinynet::naming::ClientGetRes* release_get_res();
  inline void set_allocated_get_res(::tinynet::naming::ClientGetRes* get_res);

  // optional .tinynet.naming.ClientDelRes del_res = 6;
  inline bool has_del_res() const;
  inline void clear_del_res();
  static const int kDelResFieldNumber = 6;
  inline const ::tinynet::naming::ClientDelRes& del_res() const;
  inline ::tinynet::naming::ClientDelRes* mutable_del_res();
  inline ::tinynet::naming::ClientDelRes* release_del_res();
  inline void set_allocated_del_res(::tinynet::naming::ClientDelRes* del_res);

  // optional .tinynet.naming.ClientKeysRes keys_res = 7;
  inline bool has_keys_res() const;
  inline void clear_keys_res();
  static const int kKeysResFieldNumber = 7;
  inline const ::tinynet::naming::ClientKeysRes& keys_res() const;
  inline ::tinynet::naming::ClientKeysRes* mutable_keys_res();
  inline ::tinynet::naming::ClientKeysRes* release_keys_res();
  inline void set_allocated_keys_res(::tinynet::naming::ClientKeysRes* keys_res);

  // @@protoc_insertion_point(class_scope:tinynet.naming.ClientResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_redirect();
  inline void clear_has_redirect();
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_put_res();
  inline void clear_has_put_res();
  inline void set_has_get_res();
  inline void clear_has_get_res();
  inline void set_has_del_res();
  inline void clear_has_del_res();
  inline void set_has_keys_res();
  inline void clear_has_keys_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* redirect_;
  ::google::protobuf::int32 error_code_;
  int opcode_;
  ::tinynet::naming::ClientPutRes* put_res_;
  ::tinynet::naming::ClientGetRes* get_res_;
  ::tinynet::naming::ClientDelRes* del_res_;
  ::tinynet::naming::ClientKeysRes* keys_res_;
  friend void  protobuf_AddDesc_naming_2eproto();
  friend void protobuf_AssignDesc_naming_2eproto();
  friend void protobuf_ShutdownFile_naming_2eproto();

  void InitAsDefaultInstance();
  static ClientResponse* default_instance_;
};
// ===================================================================

class NamingRpcService_Stub;

class NamingRpcService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline NamingRpcService() {};
 public:
  virtual ~NamingRpcService();

  typedef NamingRpcService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Invoke(::google::protobuf::RpcController* controller,
                       const ::tinynet::naming::ClientRequest* request,
                       ::tinynet::naming::ClientResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NamingRpcService);
};

class NamingRpcService_Stub : public NamingRpcService {
 public:
  NamingRpcService_Stub(::google::protobuf::RpcChannel* channel);
  NamingRpcService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~NamingRpcService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements NamingRpcService ------------------------------------------

  void Invoke(::google::protobuf::RpcController* controller,
                       const ::tinynet::naming::ClientRequest* request,
                       ::tinynet::naming::ClientResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NamingRpcService_Stub);
};


// ===================================================================


// ===================================================================

// KeyValuePair

// optional string key = 1;
inline bool KeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValuePair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.KeyValuePair.key)
  return *key_;
}
inline void KeyValuePair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.KeyValuePair.key)
}
inline ::std::string* KeyValuePair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.KeyValuePair.key)
  return key_;
}
inline ::std::string* KeyValuePair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeyValuePair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.KeyValuePair.key)
}

// optional string value = 2;
inline bool KeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValuePair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.KeyValuePair.value)
  return *value_;
}
inline void KeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.KeyValuePair.value)
}
inline ::std::string* KeyValuePair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.KeyValuePair.value)
  return value_;
}
inline ::std::string* KeyValuePair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeyValuePair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.KeyValuePair.value)
}

// optional int64 expire = 3;
inline bool KeyValuePair::has_expire() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyValuePair::set_has_expire() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeyValuePair::clear_has_expire() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeyValuePair::clear_expire() {
  expire_ = GOOGLE_LONGLONG(0);
  clear_has_expire();
}
inline ::google::protobuf::int64 KeyValuePair::expire() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.KeyValuePair.expire)
  return expire_;
}
inline void KeyValuePair::set_expire(::google::protobuf::int64 value) {
  set_has_expire();
  expire_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.KeyValuePair.expire)
}

// -------------------------------------------------------------------

// SnapshotData

// repeated .tinynet.naming.KeyValuePair data = 1;
inline int SnapshotData::data_size() const {
  return data_.size();
}
inline void SnapshotData::clear_data() {
  data_.Clear();
}
inline const ::tinynet::naming::KeyValuePair& SnapshotData::data(int index) const {
  // @@protoc_insertion_point(field_get:tinynet.naming.SnapshotData.data)
  return data_.Get(index);
}
inline ::tinynet::naming::KeyValuePair* SnapshotData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:tinynet.naming.SnapshotData.data)
  return data_.Mutable(index);
}
inline ::tinynet::naming::KeyValuePair* SnapshotData::add_data() {
  // @@protoc_insertion_point(field_add:tinynet.naming.SnapshotData.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinynet::naming::KeyValuePair >&
SnapshotData::data() const {
  // @@protoc_insertion_point(field_list:tinynet.naming.SnapshotData.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinynet::naming::KeyValuePair >*
SnapshotData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:tinynet.naming.SnapshotData.data)
  return &data_;
}

// -------------------------------------------------------------------

// ClusterPutData

// optional string key = 1;
inline bool ClusterPutData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterPutData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterPutData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterPutData::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClusterPutData::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClusterPutData.key)
  return *key_;
}
inline void ClusterPutData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClusterPutData.key)
}
inline void ClusterPutData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClusterPutData.key)
}
inline void ClusterPutData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClusterPutData.key)
}
inline ::std::string* ClusterPutData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClusterPutData.key)
  return key_;
}
inline ::std::string* ClusterPutData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClusterPutData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClusterPutData.key)
}

// optional string value = 2;
inline bool ClusterPutData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClusterPutData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClusterPutData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClusterPutData::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ClusterPutData::value() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClusterPutData.value)
  return *value_;
}
inline void ClusterPutData::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClusterPutData.value)
}
inline void ClusterPutData::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClusterPutData.value)
}
inline void ClusterPutData::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClusterPutData.value)
}
inline ::std::string* ClusterPutData::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClusterPutData.value)
  return value_;
}
inline ::std::string* ClusterPutData::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClusterPutData::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClusterPutData.value)
}

// optional int64 expire = 3;
inline bool ClusterPutData::has_expire() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClusterPutData::set_has_expire() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClusterPutData::clear_has_expire() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClusterPutData::clear_expire() {
  expire_ = GOOGLE_LONGLONG(0);
  clear_has_expire();
}
inline ::google::protobuf::int64 ClusterPutData::expire() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClusterPutData.expire)
  return expire_;
}
inline void ClusterPutData::set_expire(::google::protobuf::int64 value) {
  set_has_expire();
  expire_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.ClusterPutData.expire)
}

// -------------------------------------------------------------------

// ClusterDelData

// optional string key = 1;
inline bool ClusterDelData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterDelData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterDelData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterDelData::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClusterDelData::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClusterDelData.key)
  return *key_;
}
inline void ClusterDelData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClusterDelData.key)
}
inline void ClusterDelData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClusterDelData.key)
}
inline void ClusterDelData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClusterDelData.key)
}
inline ::std::string* ClusterDelData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClusterDelData.key)
  return key_;
}
inline ::std::string* ClusterDelData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClusterDelData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClusterDelData.key)
}

// -------------------------------------------------------------------

// ClusterMessage

// optional .tinynet.naming.ClusterOpcode opcode = 1;
inline bool ClusterMessage::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterMessage::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterMessage::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterMessage::clear_opcode() {
  opcode_ = 1;
  clear_has_opcode();
}
inline ::tinynet::naming::ClusterOpcode ClusterMessage::opcode() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClusterMessage.opcode)
  return static_cast< ::tinynet::naming::ClusterOpcode >(opcode_);
}
inline void ClusterMessage::set_opcode(::tinynet::naming::ClusterOpcode value) {
  assert(::tinynet::naming::ClusterOpcode_IsValid(value));
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.ClusterMessage.opcode)
}

// optional .tinynet.naming.ClusterPutData put_data = 2;
inline bool ClusterMessage::has_put_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClusterMessage::set_has_put_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClusterMessage::clear_has_put_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClusterMessage::clear_put_data() {
  if (put_data_ != NULL) put_data_->::tinynet::naming::ClusterPutData::Clear();
  clear_has_put_data();
}
inline const ::tinynet::naming::ClusterPutData& ClusterMessage::put_data() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClusterMessage.put_data)
  return put_data_ != NULL ? *put_data_ : *default_instance_->put_data_;
}
inline ::tinynet::naming::ClusterPutData* ClusterMessage::mutable_put_data() {
  set_has_put_data();
  if (put_data_ == NULL) put_data_ = new ::tinynet::naming::ClusterPutData;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClusterMessage.put_data)
  return put_data_;
}
inline ::tinynet::naming::ClusterPutData* ClusterMessage::release_put_data() {
  clear_has_put_data();
  ::tinynet::naming::ClusterPutData* temp = put_data_;
  put_data_ = NULL;
  return temp;
}
inline void ClusterMessage::set_allocated_put_data(::tinynet::naming::ClusterPutData* put_data) {
  delete put_data_;
  put_data_ = put_data;
  if (put_data) {
    set_has_put_data();
  } else {
    clear_has_put_data();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClusterMessage.put_data)
}

// optional .tinynet.naming.ClusterDelData del_data = 3;
inline bool ClusterMessage::has_del_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClusterMessage::set_has_del_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClusterMessage::clear_has_del_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClusterMessage::clear_del_data() {
  if (del_data_ != NULL) del_data_->::tinynet::naming::ClusterDelData::Clear();
  clear_has_del_data();
}
inline const ::tinynet::naming::ClusterDelData& ClusterMessage::del_data() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClusterMessage.del_data)
  return del_data_ != NULL ? *del_data_ : *default_instance_->del_data_;
}
inline ::tinynet::naming::ClusterDelData* ClusterMessage::mutable_del_data() {
  set_has_del_data();
  if (del_data_ == NULL) del_data_ = new ::tinynet::naming::ClusterDelData;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClusterMessage.del_data)
  return del_data_;
}
inline ::tinynet::naming::ClusterDelData* ClusterMessage::release_del_data() {
  clear_has_del_data();
  ::tinynet::naming::ClusterDelData* temp = del_data_;
  del_data_ = NULL;
  return temp;
}
inline void ClusterMessage::set_allocated_del_data(::tinynet::naming::ClusterDelData* del_data) {
  delete del_data_;
  del_data_ = del_data;
  if (del_data) {
    set_has_del_data();
  } else {
    clear_has_del_data();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClusterMessage.del_data)
}

// -------------------------------------------------------------------

// ClientPutReq

// optional string key = 1;
inline bool ClientPutReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientPutReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientPutReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientPutReq::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClientPutReq::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientPutReq.key)
  return *key_;
}
inline void ClientPutReq::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientPutReq.key)
}
inline void ClientPutReq::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientPutReq.key)
}
inline void ClientPutReq::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientPutReq.key)
}
inline ::std::string* ClientPutReq::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientPutReq.key)
  return key_;
}
inline ::std::string* ClientPutReq::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientPutReq::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientPutReq.key)
}

// optional string value = 2;
inline bool ClientPutReq::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientPutReq::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientPutReq::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientPutReq::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ClientPutReq::value() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientPutReq.value)
  return *value_;
}
inline void ClientPutReq::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientPutReq.value)
}
inline void ClientPutReq::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientPutReq.value)
}
inline void ClientPutReq::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientPutReq.value)
}
inline ::std::string* ClientPutReq::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientPutReq.value)
  return value_;
}
inline ::std::string* ClientPutReq::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientPutReq::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientPutReq.value)
}

// optional int32 ttl = 3;
inline bool ClientPutReq::has_ttl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientPutReq::set_has_ttl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientPutReq::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientPutReq::clear_ttl() {
  ttl_ = 0;
  clear_has_ttl();
}
inline ::google::protobuf::int32 ClientPutReq::ttl() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientPutReq.ttl)
  return ttl_;
}
inline void ClientPutReq::set_ttl(::google::protobuf::int32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientPutReq.ttl)
}

// -------------------------------------------------------------------

// ClientPutRes

// optional string key = 1;
inline bool ClientPutRes::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientPutRes::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientPutRes::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientPutRes::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClientPutRes::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientPutRes.key)
  return *key_;
}
inline void ClientPutRes::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientPutRes.key)
}
inline void ClientPutRes::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientPutRes.key)
}
inline void ClientPutRes::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientPutRes.key)
}
inline ::std::string* ClientPutRes::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientPutRes.key)
  return key_;
}
inline ::std::string* ClientPutRes::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientPutRes::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientPutRes.key)
}

// optional string value = 2;
inline bool ClientPutRes::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientPutRes::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientPutRes::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientPutRes::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ClientPutRes::value() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientPutRes.value)
  return *value_;
}
inline void ClientPutRes::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientPutRes.value)
}
inline void ClientPutRes::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientPutRes.value)
}
inline void ClientPutRes::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientPutRes.value)
}
inline ::std::string* ClientPutRes::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientPutRes.value)
  return value_;
}
inline ::std::string* ClientPutRes::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientPutRes::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientPutRes.value)
}

// optional int32 ttl = 3;
inline bool ClientPutRes::has_ttl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientPutRes::set_has_ttl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientPutRes::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientPutRes::clear_ttl() {
  ttl_ = 0;
  clear_has_ttl();
}
inline ::google::protobuf::int32 ClientPutRes::ttl() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientPutRes.ttl)
  return ttl_;
}
inline void ClientPutRes::set_ttl(::google::protobuf::int32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientPutRes.ttl)
}

// -------------------------------------------------------------------

// ClientGetReq

// optional string key = 1;
inline bool ClientGetReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientGetReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientGetReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientGetReq::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClientGetReq::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientGetReq.key)
  return *key_;
}
inline void ClientGetReq::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientGetReq.key)
}
inline void ClientGetReq::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientGetReq.key)
}
inline void ClientGetReq::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientGetReq.key)
}
inline ::std::string* ClientGetReq::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientGetReq.key)
  return key_;
}
inline ::std::string* ClientGetReq::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientGetReq::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientGetReq.key)
}

// -------------------------------------------------------------------

// ClientGetRes

// optional string key = 1;
inline bool ClientGetRes::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientGetRes::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientGetRes::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientGetRes::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClientGetRes::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientGetRes.key)
  return *key_;
}
inline void ClientGetRes::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientGetRes.key)
}
inline void ClientGetRes::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientGetRes.key)
}
inline void ClientGetRes::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientGetRes.key)
}
inline ::std::string* ClientGetRes::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientGetRes.key)
  return key_;
}
inline ::std::string* ClientGetRes::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientGetRes::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientGetRes.key)
}

// optional string value = 2;
inline bool ClientGetRes::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientGetRes::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientGetRes::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientGetRes::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ClientGetRes::value() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientGetRes.value)
  return *value_;
}
inline void ClientGetRes::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientGetRes.value)
}
inline void ClientGetRes::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientGetRes.value)
}
inline void ClientGetRes::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientGetRes.value)
}
inline ::std::string* ClientGetRes::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientGetRes.value)
  return value_;
}
inline ::std::string* ClientGetRes::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientGetRes::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientGetRes.value)
}

// -------------------------------------------------------------------

// ClientDelReq

// optional string key = 1;
inline bool ClientDelReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientDelReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientDelReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientDelReq::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClientDelReq::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientDelReq.key)
  return *key_;
}
inline void ClientDelReq::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientDelReq.key)
}
inline void ClientDelReq::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientDelReq.key)
}
inline void ClientDelReq::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientDelReq.key)
}
inline ::std::string* ClientDelReq::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientDelReq.key)
  return key_;
}
inline ::std::string* ClientDelReq::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientDelReq::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientDelReq.key)
}

// -------------------------------------------------------------------

// ClientDelRes

// optional string key = 1;
inline bool ClientDelRes::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientDelRes::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientDelRes::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientDelRes::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClientDelRes::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientDelRes.key)
  return *key_;
}
inline void ClientDelRes::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientDelRes.key)
}
inline void ClientDelRes::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientDelRes.key)
}
inline void ClientDelRes::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientDelRes.key)
}
inline ::std::string* ClientDelRes::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientDelRes.key)
  return key_;
}
inline ::std::string* ClientDelRes::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientDelRes::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientDelRes.key)
}

// -------------------------------------------------------------------

// ClientKeysReq

// optional string key = 1;
inline bool ClientKeysReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientKeysReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientKeysReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientKeysReq::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ClientKeysReq::key() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientKeysReq.key)
  return *key_;
}
inline void ClientKeysReq::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientKeysReq.key)
}
inline void ClientKeysReq::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientKeysReq.key)
}
inline void ClientKeysReq::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientKeysReq.key)
}
inline ::std::string* ClientKeysReq::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientKeysReq.key)
  return key_;
}
inline ::std::string* ClientKeysReq::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientKeysReq::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientKeysReq.key)
}

// -------------------------------------------------------------------

// ClientKeysRes

// repeated string keys = 1;
inline int ClientKeysRes::keys_size() const {
  return keys_.size();
}
inline void ClientKeysRes::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& ClientKeysRes::keys(int index) const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientKeysRes.keys)
  return keys_.Get(index);
}
inline ::std::string* ClientKeysRes::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientKeysRes.keys)
  return keys_.Mutable(index);
}
inline void ClientKeysRes::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientKeysRes.keys)
  keys_.Mutable(index)->assign(value);
}
inline void ClientKeysRes::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientKeysRes.keys)
}
inline void ClientKeysRes::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientKeysRes.keys)
}
inline ::std::string* ClientKeysRes::add_keys() {
  return keys_.Add();
}
inline void ClientKeysRes::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinynet.naming.ClientKeysRes.keys)
}
inline void ClientKeysRes::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinynet.naming.ClientKeysRes.keys)
}
inline void ClientKeysRes::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinynet.naming.ClientKeysRes.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientKeysRes::keys() const {
  // @@protoc_insertion_point(field_list:tinynet.naming.ClientKeysRes.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientKeysRes::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:tinynet.naming.ClientKeysRes.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// ClientRequest

// optional .tinynet.naming.ClientOpcode opcode = 1;
inline bool ClientRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientRequest::clear_opcode() {
  opcode_ = 1;
  clear_has_opcode();
}
inline ::tinynet::naming::ClientOpcode ClientRequest::opcode() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientRequest.opcode)
  return static_cast< ::tinynet::naming::ClientOpcode >(opcode_);
}
inline void ClientRequest::set_opcode(::tinynet::naming::ClientOpcode value) {
  assert(::tinynet::naming::ClientOpcode_IsValid(value));
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientRequest.opcode)
}

// optional .tinynet.naming.ClientPutReq put_req = 2;
inline bool ClientRequest::has_put_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientRequest::set_has_put_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientRequest::clear_has_put_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientRequest::clear_put_req() {
  if (put_req_ != NULL) put_req_->::tinynet::naming::ClientPutReq::Clear();
  clear_has_put_req();
}
inline const ::tinynet::naming::ClientPutReq& ClientRequest::put_req() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientRequest.put_req)
  return put_req_ != NULL ? *put_req_ : *default_instance_->put_req_;
}
inline ::tinynet::naming::ClientPutReq* ClientRequest::mutable_put_req() {
  set_has_put_req();
  if (put_req_ == NULL) put_req_ = new ::tinynet::naming::ClientPutReq;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientRequest.put_req)
  return put_req_;
}
inline ::tinynet::naming::ClientPutReq* ClientRequest::release_put_req() {
  clear_has_put_req();
  ::tinynet::naming::ClientPutReq* temp = put_req_;
  put_req_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_put_req(::tinynet::naming::ClientPutReq* put_req) {
  delete put_req_;
  put_req_ = put_req;
  if (put_req) {
    set_has_put_req();
  } else {
    clear_has_put_req();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientRequest.put_req)
}

// optional .tinynet.naming.ClientGetReq get_req = 3;
inline bool ClientRequest::has_get_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientRequest::set_has_get_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientRequest::clear_has_get_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientRequest::clear_get_req() {
  if (get_req_ != NULL) get_req_->::tinynet::naming::ClientGetReq::Clear();
  clear_has_get_req();
}
inline const ::tinynet::naming::ClientGetReq& ClientRequest::get_req() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientRequest.get_req)
  return get_req_ != NULL ? *get_req_ : *default_instance_->get_req_;
}
inline ::tinynet::naming::ClientGetReq* ClientRequest::mutable_get_req() {
  set_has_get_req();
  if (get_req_ == NULL) get_req_ = new ::tinynet::naming::ClientGetReq;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientRequest.get_req)
  return get_req_;
}
inline ::tinynet::naming::ClientGetReq* ClientRequest::release_get_req() {
  clear_has_get_req();
  ::tinynet::naming::ClientGetReq* temp = get_req_;
  get_req_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_get_req(::tinynet::naming::ClientGetReq* get_req) {
  delete get_req_;
  get_req_ = get_req;
  if (get_req) {
    set_has_get_req();
  } else {
    clear_has_get_req();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientRequest.get_req)
}

// optional .tinynet.naming.ClientDelReq del_req = 4;
inline bool ClientRequest::has_del_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientRequest::set_has_del_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientRequest::clear_has_del_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientRequest::clear_del_req() {
  if (del_req_ != NULL) del_req_->::tinynet::naming::ClientDelReq::Clear();
  clear_has_del_req();
}
inline const ::tinynet::naming::ClientDelReq& ClientRequest::del_req() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientRequest.del_req)
  return del_req_ != NULL ? *del_req_ : *default_instance_->del_req_;
}
inline ::tinynet::naming::ClientDelReq* ClientRequest::mutable_del_req() {
  set_has_del_req();
  if (del_req_ == NULL) del_req_ = new ::tinynet::naming::ClientDelReq;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientRequest.del_req)
  return del_req_;
}
inline ::tinynet::naming::ClientDelReq* ClientRequest::release_del_req() {
  clear_has_del_req();
  ::tinynet::naming::ClientDelReq* temp = del_req_;
  del_req_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_del_req(::tinynet::naming::ClientDelReq* del_req) {
  delete del_req_;
  del_req_ = del_req;
  if (del_req) {
    set_has_del_req();
  } else {
    clear_has_del_req();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientRequest.del_req)
}

// optional .tinynet.naming.ClientKeysReq keys_req = 5;
inline bool ClientRequest::has_keys_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientRequest::set_has_keys_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientRequest::clear_has_keys_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientRequest::clear_keys_req() {
  if (keys_req_ != NULL) keys_req_->::tinynet::naming::ClientKeysReq::Clear();
  clear_has_keys_req();
}
inline const ::tinynet::naming::ClientKeysReq& ClientRequest::keys_req() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientRequest.keys_req)
  return keys_req_ != NULL ? *keys_req_ : *default_instance_->keys_req_;
}
inline ::tinynet::naming::ClientKeysReq* ClientRequest::mutable_keys_req() {
  set_has_keys_req();
  if (keys_req_ == NULL) keys_req_ = new ::tinynet::naming::ClientKeysReq;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientRequest.keys_req)
  return keys_req_;
}
inline ::tinynet::naming::ClientKeysReq* ClientRequest::release_keys_req() {
  clear_has_keys_req();
  ::tinynet::naming::ClientKeysReq* temp = keys_req_;
  keys_req_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_keys_req(::tinynet::naming::ClientKeysReq* keys_req) {
  delete keys_req_;
  keys_req_ = keys_req;
  if (keys_req) {
    set_has_keys_req();
  } else {
    clear_has_keys_req();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientRequest.keys_req)
}

// -------------------------------------------------------------------

// ClientResponse

// optional int32 error_code = 1 [default = -5702];
inline bool ClientResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientResponse::clear_error_code() {
  error_code_ = -5702;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ClientResponse::error_code() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientResponse.error_code)
  return error_code_;
}
inline void ClientResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientResponse.error_code)
}

// optional string redirect = 2;
inline bool ClientResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientResponse::clear_redirect() {
  if (redirect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_->clear();
  }
  clear_has_redirect();
}
inline const ::std::string& ClientResponse::redirect() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientResponse.redirect)
  return *redirect_;
}
inline void ClientResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientResponse.redirect)
}
inline void ClientResponse::set_redirect(const char* value) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.naming.ClientResponse.redirect)
}
inline void ClientResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_ = new ::std::string;
  }
  redirect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.naming.ClientResponse.redirect)
}
inline ::std::string* ClientResponse::mutable_redirect() {
  set_has_redirect();
  if (redirect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientResponse.redirect)
  return redirect_;
}
inline ::std::string* ClientResponse::release_redirect() {
  clear_has_redirect();
  if (redirect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = redirect_;
    redirect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redirect_;
  }
  if (redirect) {
    set_has_redirect();
    redirect_ = redirect;
  } else {
    clear_has_redirect();
    redirect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientResponse.redirect)
}

// optional .tinynet.naming.ClientOpcode opcode = 3;
inline bool ClientResponse::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientResponse::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientResponse::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientResponse::clear_opcode() {
  opcode_ = 1;
  clear_has_opcode();
}
inline ::tinynet::naming::ClientOpcode ClientResponse::opcode() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientResponse.opcode)
  return static_cast< ::tinynet::naming::ClientOpcode >(opcode_);
}
inline void ClientResponse::set_opcode(::tinynet::naming::ClientOpcode value) {
  assert(::tinynet::naming::ClientOpcode_IsValid(value));
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:tinynet.naming.ClientResponse.opcode)
}

// optional .tinynet.naming.ClientPutRes put_res = 4;
inline bool ClientResponse::has_put_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientResponse::set_has_put_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientResponse::clear_has_put_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientResponse::clear_put_res() {
  if (put_res_ != NULL) put_res_->::tinynet::naming::ClientPutRes::Clear();
  clear_has_put_res();
}
inline const ::tinynet::naming::ClientPutRes& ClientResponse::put_res() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientResponse.put_res)
  return put_res_ != NULL ? *put_res_ : *default_instance_->put_res_;
}
inline ::tinynet::naming::ClientPutRes* ClientResponse::mutable_put_res() {
  set_has_put_res();
  if (put_res_ == NULL) put_res_ = new ::tinynet::naming::ClientPutRes;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientResponse.put_res)
  return put_res_;
}
inline ::tinynet::naming::ClientPutRes* ClientResponse::release_put_res() {
  clear_has_put_res();
  ::tinynet::naming::ClientPutRes* temp = put_res_;
  put_res_ = NULL;
  return temp;
}
inline void ClientResponse::set_allocated_put_res(::tinynet::naming::ClientPutRes* put_res) {
  delete put_res_;
  put_res_ = put_res;
  if (put_res) {
    set_has_put_res();
  } else {
    clear_has_put_res();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientResponse.put_res)
}

// optional .tinynet.naming.ClientGetRes get_res = 5;
inline bool ClientResponse::has_get_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientResponse::set_has_get_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientResponse::clear_has_get_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientResponse::clear_get_res() {
  if (get_res_ != NULL) get_res_->::tinynet::naming::ClientGetRes::Clear();
  clear_has_get_res();
}
inline const ::tinynet::naming::ClientGetRes& ClientResponse::get_res() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientResponse.get_res)
  return get_res_ != NULL ? *get_res_ : *default_instance_->get_res_;
}
inline ::tinynet::naming::ClientGetRes* ClientResponse::mutable_get_res() {
  set_has_get_res();
  if (get_res_ == NULL) get_res_ = new ::tinynet::naming::ClientGetRes;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientResponse.get_res)
  return get_res_;
}
inline ::tinynet::naming::ClientGetRes* ClientResponse::release_get_res() {
  clear_has_get_res();
  ::tinynet::naming::ClientGetRes* temp = get_res_;
  get_res_ = NULL;
  return temp;
}
inline void ClientResponse::set_allocated_get_res(::tinynet::naming::ClientGetRes* get_res) {
  delete get_res_;
  get_res_ = get_res;
  if (get_res) {
    set_has_get_res();
  } else {
    clear_has_get_res();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientResponse.get_res)
}

// optional .tinynet.naming.ClientDelRes del_res = 6;
inline bool ClientResponse::has_del_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientResponse::set_has_del_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientResponse::clear_has_del_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientResponse::clear_del_res() {
  if (del_res_ != NULL) del_res_->::tinynet::naming::ClientDelRes::Clear();
  clear_has_del_res();
}
inline const ::tinynet::naming::ClientDelRes& ClientResponse::del_res() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientResponse.del_res)
  return del_res_ != NULL ? *del_res_ : *default_instance_->del_res_;
}
inline ::tinynet::naming::ClientDelRes* ClientResponse::mutable_del_res() {
  set_has_del_res();
  if (del_res_ == NULL) del_res_ = new ::tinynet::naming::ClientDelRes;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientResponse.del_res)
  return del_res_;
}
inline ::tinynet::naming::ClientDelRes* ClientResponse::release_del_res() {
  clear_has_del_res();
  ::tinynet::naming::ClientDelRes* temp = del_res_;
  del_res_ = NULL;
  return temp;
}
inline void ClientResponse::set_allocated_del_res(::tinynet::naming::ClientDelRes* del_res) {
  delete del_res_;
  del_res_ = del_res;
  if (del_res) {
    set_has_del_res();
  } else {
    clear_has_del_res();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientResponse.del_res)
}

// optional .tinynet.naming.ClientKeysRes keys_res = 7;
inline bool ClientResponse::has_keys_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientResponse::set_has_keys_res() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientResponse::clear_has_keys_res() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientResponse::clear_keys_res() {
  if (keys_res_ != NULL) keys_res_->::tinynet::naming::ClientKeysRes::Clear();
  clear_has_keys_res();
}
inline const ::tinynet::naming::ClientKeysRes& ClientResponse::keys_res() const {
  // @@protoc_insertion_point(field_get:tinynet.naming.ClientResponse.keys_res)
  return keys_res_ != NULL ? *keys_res_ : *default_instance_->keys_res_;
}
inline ::tinynet::naming::ClientKeysRes* ClientResponse::mutable_keys_res() {
  set_has_keys_res();
  if (keys_res_ == NULL) keys_res_ = new ::tinynet::naming::ClientKeysRes;
  // @@protoc_insertion_point(field_mutable:tinynet.naming.ClientResponse.keys_res)
  return keys_res_;
}
inline ::tinynet::naming::ClientKeysRes* ClientResponse::release_keys_res() {
  clear_has_keys_res();
  ::tinynet::naming::ClientKeysRes* temp = keys_res_;
  keys_res_ = NULL;
  return temp;
}
inline void ClientResponse::set_allocated_keys_res(::tinynet::naming::ClientKeysRes* keys_res) {
  delete keys_res_;
  keys_res_ = keys_res;
  if (keys_res) {
    set_has_keys_res();
  } else {
    clear_has_keys_res();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.naming.ClientResponse.keys_res)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace naming
}  // namespace tinynet

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tinynet::naming::ClusterOpcode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinynet::naming::ClusterOpcode>() {
  return ::tinynet::naming::ClusterOpcode_descriptor();
}
template <> struct is_proto_enum< ::tinynet::naming::ClientOpcode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinynet::naming::ClientOpcode>() {
  return ::tinynet::naming::ClientOpcode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_naming_2eproto__INCLUDED
