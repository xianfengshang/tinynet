// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tdc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tdc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tinynet {
namespace tdc {

namespace {

const ::google::protobuf::Descriptor* TransferRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* TdcRpcService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tdc_2eproto() {
  protobuf_AddDesc_tdc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tdc.proto");
  GOOGLE_CHECK(file != NULL);
  TransferRequest_descriptor_ = file->message_type(0);
  static const int TransferRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, body_),
  };
  TransferRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferRequest_descriptor_,
      TransferRequest::default_instance_,
      TransferRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferRequest));
  TransferResponse_descriptor_ = file->message_type(1);
  static const int TransferResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResponse, error_code_),
  };
  TransferResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferResponse_descriptor_,
      TransferResponse::default_instance_,
      TransferResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferResponse));
  TdcRpcService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tdc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferRequest_descriptor_, &TransferRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferResponse_descriptor_, &TransferResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tdc_2eproto() {
  delete TransferRequest::default_instance_;
  delete TransferRequest_reflection_;
  delete TransferResponse::default_instance_;
  delete TransferResponse_reflection_;
}

void protobuf_AddDesc_tdc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttdc.proto\022\013tinynet.tdc\"-\n\017TransferRequ"
    "est\022\014\n\004guid\030\001 \001(\003\022\014\n\004body\030\002 \001(\014\";\n\020Trans"
    "ferResponse\022\014\n\004guid\030\001 \001(\003\022\031\n\nerror_code\030"
    "\002 \001(\005:\005-58012X\n\rTdcRpcService\022G\n\010Transfe"
    "r\022\034.tinynet.tdc.TransferRequest\032\035.tinyne"
    "t.tdc.TransferResponseB\003\200\001\001", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tdc.proto", &protobuf_RegisterTypes);
  TransferRequest::default_instance_ = new TransferRequest();
  TransferResponse::default_instance_ = new TransferResponse();
  TransferRequest::default_instance_->InitAsDefaultInstance();
  TransferResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tdc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tdc_2eproto {
  StaticDescriptorInitializer_tdc_2eproto() {
    protobuf_AddDesc_tdc_2eproto();
  }
} static_descriptor_initializer_tdc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TransferRequest::kGuidFieldNumber;
const int TransferRequest::kBodyFieldNumber;
#endif  // !_MSC_VER

TransferRequest::TransferRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.tdc.TransferRequest)
}

void TransferRequest::InitAsDefaultInstance() {
}

TransferRequest::TransferRequest(const TransferRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.tdc.TransferRequest)
}

void TransferRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferRequest::~TransferRequest() {
  // @@protoc_insertion_point(destructor:tinynet.tdc.TransferRequest)
  SharedDtor();
}

void TransferRequest::SharedDtor() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void TransferRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferRequest_descriptor_;
}

const TransferRequest& TransferRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tdc_2eproto();
  return *default_instance_;
}

TransferRequest* TransferRequest::default_instance_ = NULL;

TransferRequest* TransferRequest::New() const {
  return new TransferRequest;
}

void TransferRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.tdc.TransferRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.tdc.TransferRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.tdc.TransferRequest)
  return false;
#undef DO_
}

void TransferRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.tdc.TransferRequest)
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }

  // optional bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.tdc.TransferRequest)
}

::google::protobuf::uint8* TransferRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.tdc.TransferRequest)
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }

  // optional bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.tdc.TransferRequest)
  return target;
}

int TransferRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferRequest::MergeFrom(const TransferRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRequest::CopyFrom(const TransferRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRequest::IsInitialized() const {

  return true;
}

void TransferRequest::Swap(TransferRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferRequest_descriptor_;
  metadata.reflection = TransferRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferResponse::kGuidFieldNumber;
const int TransferResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TransferResponse::TransferResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.tdc.TransferResponse)
}

void TransferResponse::InitAsDefaultInstance() {
}

TransferResponse::TransferResponse(const TransferResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.tdc.TransferResponse)
}

void TransferResponse::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  error_code_ = -5801;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferResponse::~TransferResponse() {
  // @@protoc_insertion_point(destructor:tinynet.tdc.TransferResponse)
  SharedDtor();
}

void TransferResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferResponse_descriptor_;
}

const TransferResponse& TransferResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tdc_2eproto();
  return *default_instance_;
}

TransferResponse* TransferResponse::default_instance_ = NULL;

TransferResponse* TransferResponse::New() const {
  return new TransferResponse;
}

void TransferResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    guid_ = GOOGLE_LONGLONG(0);
    error_code_ = -5801;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.tdc.TransferResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2 [default = -5801];
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.tdc.TransferResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.tdc.TransferResponse)
  return false;
#undef DO_
}

void TransferResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.tdc.TransferResponse)
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }

  // optional int32 error_code = 2 [default = -5801];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.tdc.TransferResponse)
}

::google::protobuf::uint8* TransferResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.tdc.TransferResponse)
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }

  // optional int32 error_code = 2 [default = -5801];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.tdc.TransferResponse)
  return target;
}

int TransferResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 error_code = 2 [default = -5801];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferResponse::MergeFrom(const TransferResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponse::CopyFrom(const TransferResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponse::IsInitialized() const {

  return true;
}

void TransferResponse::Swap(TransferResponse* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferResponse_descriptor_;
  metadata.reflection = TransferResponse_reflection_;
  return metadata;
}


// ===================================================================

TdcRpcService::~TdcRpcService() {}

const ::google::protobuf::ServiceDescriptor* TdcRpcService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TdcRpcService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TdcRpcService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TdcRpcService_descriptor_;
}

void TdcRpcService::Transfer(::google::protobuf::RpcController* controller,
                         const ::tinynet::tdc::TransferRequest*,
                         ::tinynet::tdc::TransferResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Transfer() not implemented.");
  done->Run();
}

void TdcRpcService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TdcRpcService_descriptor_);
  switch(method->index()) {
    case 0:
      Transfer(controller,
             ::google::protobuf::down_cast<const ::tinynet::tdc::TransferRequest*>(request),
             ::google::protobuf::down_cast< ::tinynet::tdc::TransferResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TdcRpcService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tinynet::tdc::TransferRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& TdcRpcService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tinynet::tdc::TransferResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

TdcRpcService_Stub::TdcRpcService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TdcRpcService_Stub::TdcRpcService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TdcRpcService_Stub::~TdcRpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void TdcRpcService_Stub::Transfer(::google::protobuf::RpcController* controller,
                              const ::tinynet::tdc::TransferRequest* request,
                              ::tinynet::tdc::TransferResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace tdc
}  // namespace tinynet

// @@protoc_insertion_point(global_scope)
