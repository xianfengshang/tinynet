// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wal.proto

#ifndef PROTOBUF_wal_2eproto__INCLUDED
#define PROTOBUF_wal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "raft.pb.h"
// @@protoc_insertion_point(includes)

namespace tinynet {
namespace raft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wal_2eproto();
void protobuf_AssignDesc_wal_2eproto();
void protobuf_ShutdownFile_wal_2eproto();

class ConfChangedLog;
class TermChangedLog;
class VoteChangedLog;
class EntriesAppendedLog;
class EntriesErasedLog;
class WALRecord;

enum LogType {
  LT_ConfChanged = 0,
  LT_TermChanged = 1,
  LT_VoteChanged = 2,
  LT_EntriesAppended = 3,
  LT_EntriesErased = 4
};
bool LogType_IsValid(int value);
const LogType LogType_MIN = LT_ConfChanged;
const LogType LogType_MAX = LT_EntriesErased;
const int LogType_ARRAYSIZE = LogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogType_descriptor();
inline const ::std::string& LogType_Name(LogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogType_descriptor(), value);
}
inline bool LogType_Parse(
    const ::std::string& name, LogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogType>(
    LogType_descriptor(), name, value);
}
// ===================================================================

class ConfChangedLog : public ::google::protobuf::Message {
 public:
  ConfChangedLog();
  virtual ~ConfChangedLog();

  ConfChangedLog(const ConfChangedLog& from);

  inline ConfChangedLog& operator=(const ConfChangedLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfChangedLog& default_instance();

  void Swap(ConfChangedLog* other);

  // implements Message ----------------------------------------------

  ConfChangedLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfChangedLog& from);
  void MergeFrom(const ConfChangedLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 1;
  inline int urls_size() const;
  inline void clear_urls();
  static const int kUrlsFieldNumber = 1;
  inline const ::std::string& urls(int index) const;
  inline ::std::string* mutable_urls(int index);
  inline void set_urls(int index, const ::std::string& value);
  inline void set_urls(int index, const char* value);
  inline void set_urls(int index, const char* value, size_t size);
  inline ::std::string* add_urls();
  inline void add_urls(const ::std::string& value);
  inline void add_urls(const char* value);
  inline void add_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // @@protoc_insertion_point(class_scope:tinynet.raft.ConfChangedLog)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  friend void  protobuf_AddDesc_wal_2eproto();
  friend void protobuf_AssignDesc_wal_2eproto();
  friend void protobuf_ShutdownFile_wal_2eproto();

  void InitAsDefaultInstance();
  static ConfChangedLog* default_instance_;
};
// -------------------------------------------------------------------

class TermChangedLog : public ::google::protobuf::Message {
 public:
  TermChangedLog();
  virtual ~TermChangedLog();

  TermChangedLog(const TermChangedLog& from);

  inline TermChangedLog& operator=(const TermChangedLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TermChangedLog& default_instance();

  void Swap(TermChangedLog* other);

  // implements Message ----------------------------------------------

  TermChangedLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TermChangedLog& from);
  void MergeFrom(const TermChangedLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 current_term = 1;
  inline bool has_current_term() const;
  inline void clear_current_term();
  static const int kCurrentTermFieldNumber = 1;
  inline ::google::protobuf::uint64 current_term() const;
  inline void set_current_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tinynet.raft.TermChangedLog)
 private:
  inline void set_has_current_term();
  inline void clear_has_current_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 current_term_;
  friend void  protobuf_AddDesc_wal_2eproto();
  friend void protobuf_AssignDesc_wal_2eproto();
  friend void protobuf_ShutdownFile_wal_2eproto();

  void InitAsDefaultInstance();
  static TermChangedLog* default_instance_;
};
// -------------------------------------------------------------------

class VoteChangedLog : public ::google::protobuf::Message {
 public:
  VoteChangedLog();
  virtual ~VoteChangedLog();

  VoteChangedLog(const VoteChangedLog& from);

  inline VoteChangedLog& operator=(const VoteChangedLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteChangedLog& default_instance();

  void Swap(VoteChangedLog* other);

  // implements Message ----------------------------------------------

  VoteChangedLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteChangedLog& from);
  void MergeFrom(const VoteChangedLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 voted_for = 1;
  inline bool has_voted_for() const;
  inline void clear_voted_for();
  static const int kVotedForFieldNumber = 1;
  inline ::google::protobuf::int32 voted_for() const;
  inline void set_voted_for(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinynet.raft.VoteChangedLog)
 private:
  inline void set_has_voted_for();
  inline void clear_has_voted_for();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 voted_for_;
  friend void  protobuf_AddDesc_wal_2eproto();
  friend void protobuf_AssignDesc_wal_2eproto();
  friend void protobuf_ShutdownFile_wal_2eproto();

  void InitAsDefaultInstance();
  static VoteChangedLog* default_instance_;
};
// -------------------------------------------------------------------

class EntriesAppendedLog : public ::google::protobuf::Message {
 public:
  EntriesAppendedLog();
  virtual ~EntriesAppendedLog();

  EntriesAppendedLog(const EntriesAppendedLog& from);

  inline EntriesAppendedLog& operator=(const EntriesAppendedLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntriesAppendedLog& default_instance();

  void Swap(EntriesAppendedLog* other);

  // implements Message ----------------------------------------------

  EntriesAppendedLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntriesAppendedLog& from);
  void MergeFrom(const EntriesAppendedLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tinynet.raft.LogEntryData entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline const ::tinynet::raft::LogEntryData& entries(int index) const;
  inline ::tinynet::raft::LogEntryData* mutable_entries(int index);
  inline ::tinynet::raft::LogEntryData* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::tinynet::raft::LogEntryData >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinynet::raft::LogEntryData >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:tinynet.raft.EntriesAppendedLog)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tinynet::raft::LogEntryData > entries_;
  friend void  protobuf_AddDesc_wal_2eproto();
  friend void protobuf_AssignDesc_wal_2eproto();
  friend void protobuf_ShutdownFile_wal_2eproto();

  void InitAsDefaultInstance();
  static EntriesAppendedLog* default_instance_;
};
// -------------------------------------------------------------------

class EntriesErasedLog : public ::google::protobuf::Message {
 public:
  EntriesErasedLog();
  virtual ~EntriesErasedLog();

  EntriesErasedLog(const EntriesErasedLog& from);

  inline EntriesErasedLog& operator=(const EntriesErasedLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntriesErasedLog& default_instance();

  void Swap(EntriesErasedLog* other);

  // implements Message ----------------------------------------------

  EntriesErasedLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntriesErasedLog& from);
  void MergeFrom(const EntriesErasedLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 first_index = 1;
  inline bool has_first_index() const;
  inline void clear_first_index();
  static const int kFirstIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 first_index() const;
  inline void set_first_index(::google::protobuf::uint64 value);

  // optional uint64 last_index = 2;
  inline bool has_last_index() const;
  inline void clear_last_index();
  static const int kLastIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 last_index() const;
  inline void set_last_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tinynet.raft.EntriesErasedLog)
 private:
  inline void set_has_first_index();
  inline void clear_has_first_index();
  inline void set_has_last_index();
  inline void clear_has_last_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 first_index_;
  ::google::protobuf::uint64 last_index_;
  friend void  protobuf_AddDesc_wal_2eproto();
  friend void protobuf_AssignDesc_wal_2eproto();
  friend void protobuf_ShutdownFile_wal_2eproto();

  void InitAsDefaultInstance();
  static EntriesErasedLog* default_instance_;
};
// -------------------------------------------------------------------

class WALRecord : public ::google::protobuf::Message {
 public:
  WALRecord();
  virtual ~WALRecord();

  WALRecord(const WALRecord& from);

  inline WALRecord& operator=(const WALRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WALRecord& default_instance();

  void Swap(WALRecord* other);

  // implements Message ----------------------------------------------

  WALRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WALRecord& from);
  void MergeFrom(const WALRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tinynet.raft.LogType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::tinynet::raft::LogType type() const;
  inline void set_type(::tinynet::raft::LogType value);

  // optional .tinynet.raft.ConfChangedLog conf_changed = 2;
  inline bool has_conf_changed() const;
  inline void clear_conf_changed();
  static const int kConfChangedFieldNumber = 2;
  inline const ::tinynet::raft::ConfChangedLog& conf_changed() const;
  inline ::tinynet::raft::ConfChangedLog* mutable_conf_changed();
  inline ::tinynet::raft::ConfChangedLog* release_conf_changed();
  inline void set_allocated_conf_changed(::tinynet::raft::ConfChangedLog* conf_changed);

  // optional .tinynet.raft.TermChangedLog term_changed = 3;
  inline bool has_term_changed() const;
  inline void clear_term_changed();
  static const int kTermChangedFieldNumber = 3;
  inline const ::tinynet::raft::TermChangedLog& term_changed() const;
  inline ::tinynet::raft::TermChangedLog* mutable_term_changed();
  inline ::tinynet::raft::TermChangedLog* release_term_changed();
  inline void set_allocated_term_changed(::tinynet::raft::TermChangedLog* term_changed);

  // optional .tinynet.raft.VoteChangedLog vote_changed = 4;
  inline bool has_vote_changed() const;
  inline void clear_vote_changed();
  static const int kVoteChangedFieldNumber = 4;
  inline const ::tinynet::raft::VoteChangedLog& vote_changed() const;
  inline ::tinynet::raft::VoteChangedLog* mutable_vote_changed();
  inline ::tinynet::raft::VoteChangedLog* release_vote_changed();
  inline void set_allocated_vote_changed(::tinynet::raft::VoteChangedLog* vote_changed);

  // optional .tinynet.raft.EntriesAppendedLog entries_appended = 5;
  inline bool has_entries_appended() const;
  inline void clear_entries_appended();
  static const int kEntriesAppendedFieldNumber = 5;
  inline const ::tinynet::raft::EntriesAppendedLog& entries_appended() const;
  inline ::tinynet::raft::EntriesAppendedLog* mutable_entries_appended();
  inline ::tinynet::raft::EntriesAppendedLog* release_entries_appended();
  inline void set_allocated_entries_appended(::tinynet::raft::EntriesAppendedLog* entries_appended);

  // optional .tinynet.raft.EntriesErasedLog entries_erased = 6;
  inline bool has_entries_erased() const;
  inline void clear_entries_erased();
  static const int kEntriesErasedFieldNumber = 6;
  inline const ::tinynet::raft::EntriesErasedLog& entries_erased() const;
  inline ::tinynet::raft::EntriesErasedLog* mutable_entries_erased();
  inline ::tinynet::raft::EntriesErasedLog* release_entries_erased();
  inline void set_allocated_entries_erased(::tinynet::raft::EntriesErasedLog* entries_erased);

  // @@protoc_insertion_point(class_scope:tinynet.raft.WALRecord)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_conf_changed();
  inline void clear_has_conf_changed();
  inline void set_has_term_changed();
  inline void clear_has_term_changed();
  inline void set_has_vote_changed();
  inline void clear_has_vote_changed();
  inline void set_has_entries_appended();
  inline void clear_has_entries_appended();
  inline void set_has_entries_erased();
  inline void clear_has_entries_erased();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tinynet::raft::ConfChangedLog* conf_changed_;
  ::tinynet::raft::TermChangedLog* term_changed_;
  ::tinynet::raft::VoteChangedLog* vote_changed_;
  ::tinynet::raft::EntriesAppendedLog* entries_appended_;
  ::tinynet::raft::EntriesErasedLog* entries_erased_;
  int type_;
  friend void  protobuf_AddDesc_wal_2eproto();
  friend void protobuf_AssignDesc_wal_2eproto();
  friend void protobuf_ShutdownFile_wal_2eproto();

  void InitAsDefaultInstance();
  static WALRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// ConfChangedLog

// repeated string urls = 1;
inline int ConfChangedLog::urls_size() const {
  return urls_.size();
}
inline void ConfChangedLog::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& ConfChangedLog::urls(int index) const {
  // @@protoc_insertion_point(field_get:tinynet.raft.ConfChangedLog.urls)
  return urls_.Get(index);
}
inline ::std::string* ConfChangedLog::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:tinynet.raft.ConfChangedLog.urls)
  return urls_.Mutable(index);
}
inline void ConfChangedLog::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tinynet.raft.ConfChangedLog.urls)
  urls_.Mutable(index)->assign(value);
}
inline void ConfChangedLog::set_urls(int index, const char* value) {
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.raft.ConfChangedLog.urls)
}
inline void ConfChangedLog::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.raft.ConfChangedLog.urls)
}
inline ::std::string* ConfChangedLog::add_urls() {
  return urls_.Add();
}
inline void ConfChangedLog::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinynet.raft.ConfChangedLog.urls)
}
inline void ConfChangedLog::add_urls(const char* value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinynet.raft.ConfChangedLog.urls)
}
inline void ConfChangedLog::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinynet.raft.ConfChangedLog.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConfChangedLog::urls() const {
  // @@protoc_insertion_point(field_list:tinynet.raft.ConfChangedLog.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConfChangedLog::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:tinynet.raft.ConfChangedLog.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// TermChangedLog

// optional uint64 current_term = 1;
inline bool TermChangedLog::has_current_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TermChangedLog::set_has_current_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TermChangedLog::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TermChangedLog::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::uint64 TermChangedLog::current_term() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.TermChangedLog.current_term)
  return current_term_;
}
inline void TermChangedLog::set_current_term(::google::protobuf::uint64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:tinynet.raft.TermChangedLog.current_term)
}

// -------------------------------------------------------------------

// VoteChangedLog

// optional int32 voted_for = 1;
inline bool VoteChangedLog::has_voted_for() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteChangedLog::set_has_voted_for() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteChangedLog::clear_has_voted_for() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteChangedLog::clear_voted_for() {
  voted_for_ = 0;
  clear_has_voted_for();
}
inline ::google::protobuf::int32 VoteChangedLog::voted_for() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.VoteChangedLog.voted_for)
  return voted_for_;
}
inline void VoteChangedLog::set_voted_for(::google::protobuf::int32 value) {
  set_has_voted_for();
  voted_for_ = value;
  // @@protoc_insertion_point(field_set:tinynet.raft.VoteChangedLog.voted_for)
}

// -------------------------------------------------------------------

// EntriesAppendedLog

// repeated .tinynet.raft.LogEntryData entries = 1;
inline int EntriesAppendedLog::entries_size() const {
  return entries_.size();
}
inline void EntriesAppendedLog::clear_entries() {
  entries_.Clear();
}
inline const ::tinynet::raft::LogEntryData& EntriesAppendedLog::entries(int index) const {
  // @@protoc_insertion_point(field_get:tinynet.raft.EntriesAppendedLog.entries)
  return entries_.Get(index);
}
inline ::tinynet::raft::LogEntryData* EntriesAppendedLog::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:tinynet.raft.EntriesAppendedLog.entries)
  return entries_.Mutable(index);
}
inline ::tinynet::raft::LogEntryData* EntriesAppendedLog::add_entries() {
  // @@protoc_insertion_point(field_add:tinynet.raft.EntriesAppendedLog.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinynet::raft::LogEntryData >&
EntriesAppendedLog::entries() const {
  // @@protoc_insertion_point(field_list:tinynet.raft.EntriesAppendedLog.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinynet::raft::LogEntryData >*
EntriesAppendedLog::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:tinynet.raft.EntriesAppendedLog.entries)
  return &entries_;
}

// -------------------------------------------------------------------

// EntriesErasedLog

// optional uint64 first_index = 1;
inline bool EntriesErasedLog::has_first_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntriesErasedLog::set_has_first_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntriesErasedLog::clear_has_first_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntriesErasedLog::clear_first_index() {
  first_index_ = GOOGLE_ULONGLONG(0);
  clear_has_first_index();
}
inline ::google::protobuf::uint64 EntriesErasedLog::first_index() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.EntriesErasedLog.first_index)
  return first_index_;
}
inline void EntriesErasedLog::set_first_index(::google::protobuf::uint64 value) {
  set_has_first_index();
  first_index_ = value;
  // @@protoc_insertion_point(field_set:tinynet.raft.EntriesErasedLog.first_index)
}

// optional uint64 last_index = 2;
inline bool EntriesErasedLog::has_last_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntriesErasedLog::set_has_last_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntriesErasedLog::clear_has_last_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntriesErasedLog::clear_last_index() {
  last_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_index();
}
inline ::google::protobuf::uint64 EntriesErasedLog::last_index() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.EntriesErasedLog.last_index)
  return last_index_;
}
inline void EntriesErasedLog::set_last_index(::google::protobuf::uint64 value) {
  set_has_last_index();
  last_index_ = value;
  // @@protoc_insertion_point(field_set:tinynet.raft.EntriesErasedLog.last_index)
}

// -------------------------------------------------------------------

// WALRecord

// optional .tinynet.raft.LogType type = 1;
inline bool WALRecord::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WALRecord::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WALRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WALRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tinynet::raft::LogType WALRecord::type() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.WALRecord.type)
  return static_cast< ::tinynet::raft::LogType >(type_);
}
inline void WALRecord::set_type(::tinynet::raft::LogType value) {
  assert(::tinynet::raft::LogType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tinynet.raft.WALRecord.type)
}

// optional .tinynet.raft.ConfChangedLog conf_changed = 2;
inline bool WALRecord::has_conf_changed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WALRecord::set_has_conf_changed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WALRecord::clear_has_conf_changed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WALRecord::clear_conf_changed() {
  if (conf_changed_ != NULL) conf_changed_->::tinynet::raft::ConfChangedLog::Clear();
  clear_has_conf_changed();
}
inline const ::tinynet::raft::ConfChangedLog& WALRecord::conf_changed() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.WALRecord.conf_changed)
  return conf_changed_ != NULL ? *conf_changed_ : *default_instance_->conf_changed_;
}
inline ::tinynet::raft::ConfChangedLog* WALRecord::mutable_conf_changed() {
  set_has_conf_changed();
  if (conf_changed_ == NULL) conf_changed_ = new ::tinynet::raft::ConfChangedLog;
  // @@protoc_insertion_point(field_mutable:tinynet.raft.WALRecord.conf_changed)
  return conf_changed_;
}
inline ::tinynet::raft::ConfChangedLog* WALRecord::release_conf_changed() {
  clear_has_conf_changed();
  ::tinynet::raft::ConfChangedLog* temp = conf_changed_;
  conf_changed_ = NULL;
  return temp;
}
inline void WALRecord::set_allocated_conf_changed(::tinynet::raft::ConfChangedLog* conf_changed) {
  delete conf_changed_;
  conf_changed_ = conf_changed;
  if (conf_changed) {
    set_has_conf_changed();
  } else {
    clear_has_conf_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.raft.WALRecord.conf_changed)
}

// optional .tinynet.raft.TermChangedLog term_changed = 3;
inline bool WALRecord::has_term_changed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WALRecord::set_has_term_changed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WALRecord::clear_has_term_changed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WALRecord::clear_term_changed() {
  if (term_changed_ != NULL) term_changed_->::tinynet::raft::TermChangedLog::Clear();
  clear_has_term_changed();
}
inline const ::tinynet::raft::TermChangedLog& WALRecord::term_changed() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.WALRecord.term_changed)
  return term_changed_ != NULL ? *term_changed_ : *default_instance_->term_changed_;
}
inline ::tinynet::raft::TermChangedLog* WALRecord::mutable_term_changed() {
  set_has_term_changed();
  if (term_changed_ == NULL) term_changed_ = new ::tinynet::raft::TermChangedLog;
  // @@protoc_insertion_point(field_mutable:tinynet.raft.WALRecord.term_changed)
  return term_changed_;
}
inline ::tinynet::raft::TermChangedLog* WALRecord::release_term_changed() {
  clear_has_term_changed();
  ::tinynet::raft::TermChangedLog* temp = term_changed_;
  term_changed_ = NULL;
  return temp;
}
inline void WALRecord::set_allocated_term_changed(::tinynet::raft::TermChangedLog* term_changed) {
  delete term_changed_;
  term_changed_ = term_changed;
  if (term_changed) {
    set_has_term_changed();
  } else {
    clear_has_term_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.raft.WALRecord.term_changed)
}

// optional .tinynet.raft.VoteChangedLog vote_changed = 4;
inline bool WALRecord::has_vote_changed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WALRecord::set_has_vote_changed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WALRecord::clear_has_vote_changed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WALRecord::clear_vote_changed() {
  if (vote_changed_ != NULL) vote_changed_->::tinynet::raft::VoteChangedLog::Clear();
  clear_has_vote_changed();
}
inline const ::tinynet::raft::VoteChangedLog& WALRecord::vote_changed() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.WALRecord.vote_changed)
  return vote_changed_ != NULL ? *vote_changed_ : *default_instance_->vote_changed_;
}
inline ::tinynet::raft::VoteChangedLog* WALRecord::mutable_vote_changed() {
  set_has_vote_changed();
  if (vote_changed_ == NULL) vote_changed_ = new ::tinynet::raft::VoteChangedLog;
  // @@protoc_insertion_point(field_mutable:tinynet.raft.WALRecord.vote_changed)
  return vote_changed_;
}
inline ::tinynet::raft::VoteChangedLog* WALRecord::release_vote_changed() {
  clear_has_vote_changed();
  ::tinynet::raft::VoteChangedLog* temp = vote_changed_;
  vote_changed_ = NULL;
  return temp;
}
inline void WALRecord::set_allocated_vote_changed(::tinynet::raft::VoteChangedLog* vote_changed) {
  delete vote_changed_;
  vote_changed_ = vote_changed;
  if (vote_changed) {
    set_has_vote_changed();
  } else {
    clear_has_vote_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.raft.WALRecord.vote_changed)
}

// optional .tinynet.raft.EntriesAppendedLog entries_appended = 5;
inline bool WALRecord::has_entries_appended() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WALRecord::set_has_entries_appended() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WALRecord::clear_has_entries_appended() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WALRecord::clear_entries_appended() {
  if (entries_appended_ != NULL) entries_appended_->::tinynet::raft::EntriesAppendedLog::Clear();
  clear_has_entries_appended();
}
inline const ::tinynet::raft::EntriesAppendedLog& WALRecord::entries_appended() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.WALRecord.entries_appended)
  return entries_appended_ != NULL ? *entries_appended_ : *default_instance_->entries_appended_;
}
inline ::tinynet::raft::EntriesAppendedLog* WALRecord::mutable_entries_appended() {
  set_has_entries_appended();
  if (entries_appended_ == NULL) entries_appended_ = new ::tinynet::raft::EntriesAppendedLog;
  // @@protoc_insertion_point(field_mutable:tinynet.raft.WALRecord.entries_appended)
  return entries_appended_;
}
inline ::tinynet::raft::EntriesAppendedLog* WALRecord::release_entries_appended() {
  clear_has_entries_appended();
  ::tinynet::raft::EntriesAppendedLog* temp = entries_appended_;
  entries_appended_ = NULL;
  return temp;
}
inline void WALRecord::set_allocated_entries_appended(::tinynet::raft::EntriesAppendedLog* entries_appended) {
  delete entries_appended_;
  entries_appended_ = entries_appended;
  if (entries_appended) {
    set_has_entries_appended();
  } else {
    clear_has_entries_appended();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.raft.WALRecord.entries_appended)
}

// optional .tinynet.raft.EntriesErasedLog entries_erased = 6;
inline bool WALRecord::has_entries_erased() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WALRecord::set_has_entries_erased() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WALRecord::clear_has_entries_erased() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WALRecord::clear_entries_erased() {
  if (entries_erased_ != NULL) entries_erased_->::tinynet::raft::EntriesErasedLog::Clear();
  clear_has_entries_erased();
}
inline const ::tinynet::raft::EntriesErasedLog& WALRecord::entries_erased() const {
  // @@protoc_insertion_point(field_get:tinynet.raft.WALRecord.entries_erased)
  return entries_erased_ != NULL ? *entries_erased_ : *default_instance_->entries_erased_;
}
inline ::tinynet::raft::EntriesErasedLog* WALRecord::mutable_entries_erased() {
  set_has_entries_erased();
  if (entries_erased_ == NULL) entries_erased_ = new ::tinynet::raft::EntriesErasedLog;
  // @@protoc_insertion_point(field_mutable:tinynet.raft.WALRecord.entries_erased)
  return entries_erased_;
}
inline ::tinynet::raft::EntriesErasedLog* WALRecord::release_entries_erased() {
  clear_has_entries_erased();
  ::tinynet::raft::EntriesErasedLog* temp = entries_erased_;
  entries_erased_ = NULL;
  return temp;
}
inline void WALRecord::set_allocated_entries_erased(::tinynet::raft::EntriesErasedLog* entries_erased) {
  delete entries_erased_;
  entries_erased_ = entries_erased;
  if (entries_erased) {
    set_has_entries_erased();
  } else {
    clear_has_entries_erased();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.raft.WALRecord.entries_erased)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft
}  // namespace tinynet

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tinynet::raft::LogType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinynet::raft::LogType>() {
  return ::tinynet::raft::LogType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wal_2eproto__INCLUDED
