// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tinynet {
namespace raft {

namespace {

const ::google::protobuf::Descriptor* SnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallSnapshotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallSnapshotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallSnapshotResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallSnapshotResp_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* RaftRpcService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_2eproto() {
  protobuf_AddDesc_raft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft.proto");
  GOOGLE_CHECK(file != NULL);
  SnapshotData_descriptor_ = file->message_type(0);
  static const int SnapshotData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, data_),
  };
  SnapshotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotData_descriptor_,
      SnapshotData::default_instance_,
      SnapshotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotData));
  LogEntryData_descriptor_ = file->message_type(1);
  static const int LogEntryData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, data_),
  };
  LogEntryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntryData_descriptor_,
      LogEntryData::default_instance_,
      LogEntryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntryData));
  LogData_descriptor_ = file->message_type(2);
  static const int LogData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, logs_),
  };
  LogData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogData_descriptor_,
      LogData::default_instance_,
      LogData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogData));
  VoteReq_descriptor_ = file->message_type(3);
  static const int VoteReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteReq, peerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteReq, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteReq, candidateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteReq, lastlogindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteReq, lastlogterm_),
  };
  VoteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteReq_descriptor_,
      VoteReq::default_instance_,
      VoteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteReq));
  VoteResp_descriptor_ = file->message_type(4);
  static const int VoteResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResp, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResp, votegranted_),
  };
  VoteResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteResp_descriptor_,
      VoteResp::default_instance_,
      VoteResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteResp));
  AppendEntriesReq_descriptor_ = file->message_type(5);
  static const int AppendEntriesReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, peerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, prevlogindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, prevlogterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, leadercommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, snapshot_),
  };
  AppendEntriesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesReq_descriptor_,
      AppendEntriesReq::default_instance_,
      AppendEntriesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesReq));
  AppendEntriesResp_descriptor_ = file->message_type(6);
  static const int AppendEntriesResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResp, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResp, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResp, matchindex_),
  };
  AppendEntriesResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesResp_descriptor_,
      AppendEntriesResp::default_instance_,
      AppendEntriesResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesResp));
  InstallSnapshotReq_descriptor_ = file->message_type(7);
  static const int InstallSnapshotReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, peerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, lastincludedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, lastincludedterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, done_),
  };
  InstallSnapshotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallSnapshotReq_descriptor_,
      InstallSnapshotReq::default_instance_,
      InstallSnapshotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallSnapshotReq));
  InstallSnapshotResp_descriptor_ = file->message_type(8);
  static const int InstallSnapshotResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResp, term_),
  };
  InstallSnapshotResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallSnapshotResp_descriptor_,
      InstallSnapshotResp::default_instance_,
      InstallSnapshotResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallSnapshotResp));
  RaftRpcService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotData_descriptor_, &SnapshotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntryData_descriptor_, &LogEntryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogData_descriptor_, &LogData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteReq_descriptor_, &VoteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteResp_descriptor_, &VoteResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesReq_descriptor_, &AppendEntriesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesResp_descriptor_, &AppendEntriesResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallSnapshotReq_descriptor_, &InstallSnapshotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallSnapshotResp_descriptor_, &InstallSnapshotResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_2eproto() {
  delete SnapshotData::default_instance_;
  delete SnapshotData_reflection_;
  delete LogEntryData::default_instance_;
  delete LogEntryData_reflection_;
  delete LogData::default_instance_;
  delete LogData_reflection_;
  delete VoteReq::default_instance_;
  delete VoteReq_reflection_;
  delete VoteResp::default_instance_;
  delete VoteResp_reflection_;
  delete AppendEntriesReq::default_instance_;
  delete AppendEntriesReq_reflection_;
  delete AppendEntriesResp::default_instance_;
  delete AppendEntriesResp_reflection_;
  delete InstallSnapshotReq::default_instance_;
  delete InstallSnapshotReq_reflection_;
  delete InstallSnapshotResp::default_instance_;
  delete InstallSnapshotResp_reflection_;
}

void protobuf_AddDesc_raft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nraft.proto\022\014tinynet.raft\"9\n\014SnapshotDa"
    "ta\022\r\n\005index\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\022\014\n\004data\030"
    "\003 \001(\014\"9\n\014LogEntryData\022\r\n\005index\030\001 \001(\004\022\014\n\004"
    "term\030\002 \001(\004\022\014\n\004data\030\003 \001(\014\"3\n\007LogData\022(\n\004l"
    "ogs\030\001 \003(\0132\032.tinynet.raft.LogEntryData\"g\n"
    "\007VoteReq\022\016\n\006peerId\030\001 \001(\005\022\014\n\004term\030\002 \001(\004\022\023"
    "\n\013candidateId\030\003 \001(\005\022\024\n\014lastLogIndex\030\004 \001("
    "\004\022\023\n\013lastLogTerm\030\005 \001(\004\"-\n\010VoteResp\022\014\n\004te"
    "rm\030\001 \001(\004\022\023\n\013voteGranted\030\002 \001(\010\"\361\001\n\020Append"
    "EntriesReq\022\021\n\ttimestamp\030\001 \001(\003\022\016\n\006peerId\030"
    "\002 \001(\005\022\014\n\004term\030\003 \001(\004\022\020\n\010leaderId\030\004 \001(\005\022\024\n"
    "\014prevLogIndex\030\005 \001(\004\022\023\n\013prevLogTerm\030\006 \001(\004"
    "\022+\n\007entries\030\007 \003(\0132\032.tinynet.raft.LogEntr"
    "yData\022\024\n\014leaderCommit\030\010 \001(\004\022,\n\010snapshot\030"
    "\t \001(\0132\032.tinynet.raft.SnapshotData\"F\n\021App"
    "endEntriesResp\022\014\n\004term\030\001 \001(\004\022\017\n\007success\030"
    "\002 \001(\010\022\022\n\nmatchIndex\030\003 \001(\004\"\245\001\n\022InstallSna"
    "pshotReq\022\016\n\006peerId\030\001 \001(\005\022\014\n\004term\030\002 \001(\004\022\020"
    "\n\010leaderId\030\003 \001(\005\022\031\n\021lastIncludedIndex\030\004 "
    "\001(\004\022\030\n\020lastIncludedTerm\030\005 \001(\004\022\016\n\006offset\030"
    "\006 \001(\r\022\014\n\004data\030\007 \001(\014\022\014\n\004done\030\010 \001(\010\"#\n\023Ins"
    "tallSnapshotResp\022\014\n\004term\030\001 \001(\0042\370\001\n\016RaftR"
    "pcService\022<\n\013RequestVote\022\025.tinynet.raft."
    "VoteReq\032\026.tinynet.raft.VoteResp\022P\n\rAppen"
    "dEntries\022\036.tinynet.raft.AppendEntriesReq"
    "\032\037.tinynet.raft.AppendEntriesResp\022V\n\017Ins"
    "tallSnapshot\022 .tinynet.raft.InstallSnaps"
    "hotReq\032!.tinynet.raft.InstallSnapshotRes"
    "pB\003\200\001\001", 1126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
  SnapshotData::default_instance_ = new SnapshotData();
  LogEntryData::default_instance_ = new LogEntryData();
  LogData::default_instance_ = new LogData();
  VoteReq::default_instance_ = new VoteReq();
  VoteResp::default_instance_ = new VoteResp();
  AppendEntriesReq::default_instance_ = new AppendEntriesReq();
  AppendEntriesResp::default_instance_ = new AppendEntriesResp();
  InstallSnapshotReq::default_instance_ = new InstallSnapshotReq();
  InstallSnapshotResp::default_instance_ = new InstallSnapshotResp();
  SnapshotData::default_instance_->InitAsDefaultInstance();
  LogEntryData::default_instance_->InitAsDefaultInstance();
  LogData::default_instance_->InitAsDefaultInstance();
  VoteReq::default_instance_->InitAsDefaultInstance();
  VoteResp::default_instance_->InitAsDefaultInstance();
  AppendEntriesReq::default_instance_->InitAsDefaultInstance();
  AppendEntriesResp::default_instance_->InitAsDefaultInstance();
  InstallSnapshotReq::default_instance_->InitAsDefaultInstance();
  InstallSnapshotResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_2eproto {
  StaticDescriptorInitializer_raft_2eproto() {
    protobuf_AddDesc_raft_2eproto();
  }
} static_descriptor_initializer_raft_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SnapshotData::kIndexFieldNumber;
const int SnapshotData::kTermFieldNumber;
const int SnapshotData::kDataFieldNumber;
#endif  // !_MSC_VER

SnapshotData::SnapshotData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.SnapshotData)
}

void SnapshotData::InitAsDefaultInstance() {
}

SnapshotData::SnapshotData(const SnapshotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.SnapshotData)
}

void SnapshotData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotData::~SnapshotData() {
  // @@protoc_insertion_point(destructor:tinynet.raft.SnapshotData)
  SharedDtor();
}

void SnapshotData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotData_descriptor_;
}

const SnapshotData& SnapshotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

SnapshotData* SnapshotData::default_instance_ = NULL;

SnapshotData* SnapshotData::New() const {
  return new SnapshotData;
}

void SnapshotData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SnapshotData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, term_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.SnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.SnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.SnapshotData)
  return false;
#undef DO_
}

void SnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.SnapshotData)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.SnapshotData)
}

::google::protobuf::uint8* SnapshotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.SnapshotData)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.SnapshotData)
  return target;
}

int SnapshotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotData::MergeFrom(const SnapshotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotData::CopyFrom(const SnapshotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotData::IsInitialized() const {

  return true;
}

void SnapshotData::Swap(SnapshotData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(term_, other->term_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotData_descriptor_;
  metadata.reflection = SnapshotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntryData::kIndexFieldNumber;
const int LogEntryData::kTermFieldNumber;
const int LogEntryData::kDataFieldNumber;
#endif  // !_MSC_VER

LogEntryData::LogEntryData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.LogEntryData)
}

void LogEntryData::InitAsDefaultInstance() {
}

LogEntryData::LogEntryData(const LogEntryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.LogEntryData)
}

void LogEntryData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntryData::~LogEntryData() {
  // @@protoc_insertion_point(destructor:tinynet.raft.LogEntryData)
  SharedDtor();
}

void LogEntryData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LogEntryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntryData_descriptor_;
}

const LogEntryData& LogEntryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

LogEntryData* LogEntryData::default_instance_ = NULL;

LogEntryData* LogEntryData::New() const {
  return new LogEntryData;
}

void LogEntryData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogEntryData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, term_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.LogEntryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.LogEntryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.LogEntryData)
  return false;
#undef DO_
}

void LogEntryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.LogEntryData)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.LogEntryData)
}

::google::protobuf::uint8* LogEntryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.LogEntryData)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.LogEntryData)
  return target;
}

int LogEntryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntryData::MergeFrom(const LogEntryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryData::CopyFrom(const LogEntryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryData::IsInitialized() const {

  return true;
}

void LogEntryData::Swap(LogEntryData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(term_, other->term_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntryData_descriptor_;
  metadata.reflection = LogEntryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogData::kLogsFieldNumber;
#endif  // !_MSC_VER

LogData::LogData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.LogData)
}

void LogData::InitAsDefaultInstance() {
}

LogData::LogData(const LogData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.LogData)
}

void LogData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogData::~LogData() {
  // @@protoc_insertion_point(destructor:tinynet.raft.LogData)
  SharedDtor();
}

void LogData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogData_descriptor_;
}

const LogData& LogData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

LogData* LogData::default_instance_ = NULL;

LogData* LogData::New() const {
  return new LogData;
}

void LogData::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.LogData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tinynet.raft.LogEntryData logs = 1;
      case 1: {
        if (tag == 10) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.LogData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.LogData)
  return false;
#undef DO_
}

void LogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.LogData)
  // repeated .tinynet.raft.LogEntryData logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.LogData)
}

::google::protobuf::uint8* LogData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.LogData)
  // repeated .tinynet.raft.LogEntryData logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.LogData)
  return target;
}

int LogData::ByteSize() const {
  int total_size = 0;

  // repeated .tinynet.raft.LogEntryData logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogData::MergeFrom(const LogData& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogData::CopyFrom(const LogData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogData::IsInitialized() const {

  return true;
}

void LogData::Swap(LogData* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogData_descriptor_;
  metadata.reflection = LogData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteReq::kPeerIdFieldNumber;
const int VoteReq::kTermFieldNumber;
const int VoteReq::kCandidateIdFieldNumber;
const int VoteReq::kLastLogIndexFieldNumber;
const int VoteReq::kLastLogTermFieldNumber;
#endif  // !_MSC_VER

VoteReq::VoteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.VoteReq)
}

void VoteReq::InitAsDefaultInstance() {
}

VoteReq::VoteReq(const VoteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.VoteReq)
}

void VoteReq::SharedCtor() {
  _cached_size_ = 0;
  peerid_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  candidateid_ = 0;
  lastlogindex_ = GOOGLE_ULONGLONG(0);
  lastlogterm_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteReq::~VoteReq() {
  // @@protoc_insertion_point(destructor:tinynet.raft.VoteReq)
  SharedDtor();
}

void VoteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteReq_descriptor_;
}

const VoteReq& VoteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

VoteReq* VoteReq::default_instance_ = NULL;

VoteReq* VoteReq::New() const {
  return new VoteReq;
}

void VoteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VoteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(term_, lastlogterm_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.VoteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 peerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peerid_)));
          set_has_peerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_candidateId;
        break;
      }

      // optional int32 candidateId = 3;
      case 3: {
        if (tag == 24) {
         parse_candidateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidateid_)));
          set_has_candidateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastLogIndex;
        break;
      }

      // optional uint64 lastLogIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_lastLogIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogindex_)));
          set_has_lastlogindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastLogTerm;
        break;
      }

      // optional uint64 lastLogTerm = 5;
      case 5: {
        if (tag == 40) {
         parse_lastLogTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogterm_)));
          set_has_lastlogterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.VoteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.VoteReq)
  return false;
#undef DO_
}

void VoteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.VoteReq)
  // optional int32 peerId = 1;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->peerid(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // optional int32 candidateId = 3;
  if (has_candidateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->candidateid(), output);
  }

  // optional uint64 lastLogIndex = 4;
  if (has_lastlogindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastlogindex(), output);
  }

  // optional uint64 lastLogTerm = 5;
  if (has_lastlogterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastlogterm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.VoteReq)
}

::google::protobuf::uint8* VoteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.VoteReq)
  // optional int32 peerId = 1;
  if (has_peerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->peerid(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // optional int32 candidateId = 3;
  if (has_candidateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->candidateid(), target);
  }

  // optional uint64 lastLogIndex = 4;
  if (has_lastlogindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastlogindex(), target);
  }

  // optional uint64 lastLogTerm = 5;
  if (has_lastlogterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lastlogterm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.VoteReq)
  return target;
}

int VoteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 peerId = 1;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peerid());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional int32 candidateId = 3;
    if (has_candidateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidateid());
    }

    // optional uint64 lastLogIndex = 4;
    if (has_lastlogindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogindex());
    }

    // optional uint64 lastLogTerm = 5;
    if (has_lastlogterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogterm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteReq::MergeFrom(const VoteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peerid()) {
      set_peerid(from.peerid());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_candidateid()) {
      set_candidateid(from.candidateid());
    }
    if (from.has_lastlogindex()) {
      set_lastlogindex(from.lastlogindex());
    }
    if (from.has_lastlogterm()) {
      set_lastlogterm(from.lastlogterm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteReq::CopyFrom(const VoteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteReq::IsInitialized() const {

  return true;
}

void VoteReq::Swap(VoteReq* other) {
  if (other != this) {
    std::swap(peerid_, other->peerid_);
    std::swap(term_, other->term_);
    std::swap(candidateid_, other->candidateid_);
    std::swap(lastlogindex_, other->lastlogindex_);
    std::swap(lastlogterm_, other->lastlogterm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteReq_descriptor_;
  metadata.reflection = VoteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteResp::kTermFieldNumber;
const int VoteResp::kVoteGrantedFieldNumber;
#endif  // !_MSC_VER

VoteResp::VoteResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.VoteResp)
}

void VoteResp::InitAsDefaultInstance() {
}

VoteResp::VoteResp(const VoteResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.VoteResp)
}

void VoteResp::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  votegranted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteResp::~VoteResp() {
  // @@protoc_insertion_point(destructor:tinynet.raft.VoteResp)
  SharedDtor();
}

void VoteResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteResp_descriptor_;
}

const VoteResp& VoteResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

VoteResp* VoteResp::default_instance_ = NULL;

VoteResp* VoteResp::New() const {
  return new VoteResp;
}

void VoteResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VoteResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, votegranted_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.VoteResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_voteGranted;
        break;
      }

      // optional bool voteGranted = 2;
      case 2: {
        if (tag == 16) {
         parse_voteGranted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
          set_has_votegranted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.VoteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.VoteResp)
  return false;
#undef DO_
}

void VoteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.VoteResp)
  // optional uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional bool voteGranted = 2;
  if (has_votegranted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.VoteResp)
}

::google::protobuf::uint8* VoteResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.VoteResp)
  // optional uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional bool voteGranted = 2;
  if (has_votegranted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.VoteResp)
  return target;
}

int VoteResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional bool voteGranted = 2;
    if (has_votegranted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteResp::MergeFrom(const VoteResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_votegranted()) {
      set_votegranted(from.votegranted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResp::CopyFrom(const VoteResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResp::IsInitialized() const {

  return true;
}

void VoteResp::Swap(VoteResp* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(votegranted_, other->votegranted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteResp_descriptor_;
  metadata.reflection = VoteResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesReq::kTimestampFieldNumber;
const int AppendEntriesReq::kPeerIdFieldNumber;
const int AppendEntriesReq::kTermFieldNumber;
const int AppendEntriesReq::kLeaderIdFieldNumber;
const int AppendEntriesReq::kPrevLogIndexFieldNumber;
const int AppendEntriesReq::kPrevLogTermFieldNumber;
const int AppendEntriesReq::kEntriesFieldNumber;
const int AppendEntriesReq::kLeaderCommitFieldNumber;
const int AppendEntriesReq::kSnapshotFieldNumber;
#endif  // !_MSC_VER

AppendEntriesReq::AppendEntriesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.AppendEntriesReq)
}

void AppendEntriesReq::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::tinynet::raft::SnapshotData*>(&::tinynet::raft::SnapshotData::default_instance());
}

AppendEntriesReq::AppendEntriesReq(const AppendEntriesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.AppendEntriesReq)
}

void AppendEntriesReq::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  peerid_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  leaderid_ = 0;
  prevlogindex_ = GOOGLE_ULONGLONG(0);
  prevlogterm_ = GOOGLE_ULONGLONG(0);
  leadercommit_ = GOOGLE_ULONGLONG(0);
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesReq::~AppendEntriesReq() {
  // @@protoc_insertion_point(destructor:tinynet.raft.AppendEntriesReq)
  SharedDtor();
}

void AppendEntriesReq::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void AppendEntriesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesReq_descriptor_;
}

const AppendEntriesReq& AppendEntriesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

AppendEntriesReq* AppendEntriesReq::default_instance_ = NULL;

AppendEntriesReq* AppendEntriesReq::New() const {
  return new AppendEntriesReq;
}

void AppendEntriesReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(timestamp_, prevlogterm_);
    leadercommit_ = GOOGLE_ULONGLONG(0);
  }
  if (has_snapshot()) {
    if (snapshot_ != NULL) snapshot_->::tinynet::raft::SnapshotData::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.AppendEntriesReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_peerId;
        break;
      }

      // optional int32 peerId = 2;
      case 2: {
        if (tag == 16) {
         parse_peerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peerid_)));
          set_has_peerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional uint64 term = 3;
      case 3: {
        if (tag == 24) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leaderId;
        break;
      }

      // optional int32 leaderId = 4;
      case 4: {
        if (tag == 32) {
         parse_leaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prevLogIndex;
        break;
      }

      // optional uint64 prevLogIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_prevLogIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogindex_)));
          set_has_prevlogindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prevLogTerm;
        break;
      }

      // optional uint64 prevLogTerm = 6;
      case 6: {
        if (tag == 48) {
         parse_prevLogTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogterm_)));
          set_has_prevlogterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .tinynet.raft.LogEntryData entries = 7;
      case 7: {
        if (tag == 58) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        if (input->ExpectTag(64)) goto parse_leaderCommit;
        break;
      }

      // optional uint64 leaderCommit = 8;
      case 8: {
        if (tag == 64) {
         parse_leaderCommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leadercommit_)));
          set_has_leadercommit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_snapshot;
        break;
      }

      // optional .tinynet.raft.SnapshotData snapshot = 9;
      case 9: {
        if (tag == 74) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.AppendEntriesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.AppendEntriesReq)
  return false;
#undef DO_
}

void AppendEntriesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.AppendEntriesReq)
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 peerId = 2;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->peerid(), output);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // optional int32 leaderId = 4;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leaderid(), output);
  }

  // optional uint64 prevLogIndex = 5;
  if (has_prevlogindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->prevlogindex(), output);
  }

  // optional uint64 prevLogTerm = 6;
  if (has_prevlogterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->prevlogterm(), output);
  }

  // repeated .tinynet.raft.LogEntryData entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  // optional uint64 leaderCommit = 8;
  if (has_leadercommit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->leadercommit(), output);
  }

  // optional .tinynet.raft.SnapshotData snapshot = 9;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.AppendEntriesReq)
}

::google::protobuf::uint8* AppendEntriesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.AppendEntriesReq)
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 peerId = 2;
  if (has_peerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->peerid(), target);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // optional int32 leaderId = 4;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leaderid(), target);
  }

  // optional uint64 prevLogIndex = 5;
  if (has_prevlogindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->prevlogindex(), target);
  }

  // optional uint64 prevLogTerm = 6;
  if (has_prevlogterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->prevlogterm(), target);
  }

  // repeated .tinynet.raft.LogEntryData entries = 7;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->entries(i), target);
  }

  // optional uint64 leaderCommit = 8;
  if (has_leadercommit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->leadercommit(), target);
  }

  // optional .tinynet.raft.SnapshotData snapshot = 9;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.AppendEntriesReq)
  return target;
}

int AppendEntriesReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 peerId = 2;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peerid());
    }

    // optional uint64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional int32 leaderId = 4;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderid());
    }

    // optional uint64 prevLogIndex = 5;
    if (has_prevlogindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prevlogindex());
    }

    // optional uint64 prevLogTerm = 6;
    if (has_prevlogterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prevlogterm());
    }

    // optional uint64 leaderCommit = 8;
    if (has_leadercommit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leadercommit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .tinynet.raft.SnapshotData snapshot = 9;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  // repeated .tinynet.raft.LogEntryData entries = 7;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesReq::MergeFrom(const AppendEntriesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_peerid()) {
      set_peerid(from.peerid());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_prevlogindex()) {
      set_prevlogindex(from.prevlogindex());
    }
    if (from.has_prevlogterm()) {
      set_prevlogterm(from.prevlogterm());
    }
    if (from.has_leadercommit()) {
      set_leadercommit(from.leadercommit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::tinynet::raft::SnapshotData::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReq::CopyFrom(const AppendEntriesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReq::IsInitialized() const {

  return true;
}

void AppendEntriesReq::Swap(AppendEntriesReq* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(peerid_, other->peerid_);
    std::swap(term_, other->term_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(prevlogindex_, other->prevlogindex_);
    std::swap(prevlogterm_, other->prevlogterm_);
    entries_.Swap(&other->entries_);
    std::swap(leadercommit_, other->leadercommit_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesReq_descriptor_;
  metadata.reflection = AppendEntriesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesResp::kTermFieldNumber;
const int AppendEntriesResp::kSuccessFieldNumber;
const int AppendEntriesResp::kMatchIndexFieldNumber;
#endif  // !_MSC_VER

AppendEntriesResp::AppendEntriesResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.AppendEntriesResp)
}

void AppendEntriesResp::InitAsDefaultInstance() {
}

AppendEntriesResp::AppendEntriesResp(const AppendEntriesResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.AppendEntriesResp)
}

void AppendEntriesResp::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  matchindex_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesResp::~AppendEntriesResp() {
  // @@protoc_insertion_point(destructor:tinynet.raft.AppendEntriesResp)
  SharedDtor();
}

void AppendEntriesResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesResp_descriptor_;
}

const AppendEntriesResp& AppendEntriesResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

AppendEntriesResp* AppendEntriesResp::default_instance_ = NULL;

AppendEntriesResp* AppendEntriesResp::New() const {
  return new AppendEntriesResp;
}

void AppendEntriesResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, success_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.AppendEntriesResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_matchIndex;
        break;
      }

      // optional uint64 matchIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_matchIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchindex_)));
          set_has_matchindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.AppendEntriesResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.AppendEntriesResp)
  return false;
#undef DO_
}

void AppendEntriesResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.AppendEntriesResp)
  // optional uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional uint64 matchIndex = 3;
  if (has_matchindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->matchindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.AppendEntriesResp)
}

::google::protobuf::uint8* AppendEntriesResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.AppendEntriesResp)
  // optional uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional uint64 matchIndex = 3;
  if (has_matchindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->matchindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.AppendEntriesResp)
  return target;
}

int AppendEntriesResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 matchIndex = 3;
    if (has_matchindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesResp::MergeFrom(const AppendEntriesResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_matchindex()) {
      set_matchindex(from.matchindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResp::CopyFrom(const AppendEntriesResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResp::IsInitialized() const {

  return true;
}

void AppendEntriesResp::Swap(AppendEntriesResp* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(matchindex_, other->matchindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesResp_descriptor_;
  metadata.reflection = AppendEntriesResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallSnapshotReq::kPeerIdFieldNumber;
const int InstallSnapshotReq::kTermFieldNumber;
const int InstallSnapshotReq::kLeaderIdFieldNumber;
const int InstallSnapshotReq::kLastIncludedIndexFieldNumber;
const int InstallSnapshotReq::kLastIncludedTermFieldNumber;
const int InstallSnapshotReq::kOffsetFieldNumber;
const int InstallSnapshotReq::kDataFieldNumber;
const int InstallSnapshotReq::kDoneFieldNumber;
#endif  // !_MSC_VER

InstallSnapshotReq::InstallSnapshotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.InstallSnapshotReq)
}

void InstallSnapshotReq::InitAsDefaultInstance() {
}

InstallSnapshotReq::InstallSnapshotReq(const InstallSnapshotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.InstallSnapshotReq)
}

void InstallSnapshotReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  peerid_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  leaderid_ = 0;
  lastincludedindex_ = GOOGLE_ULONGLONG(0);
  lastincludedterm_ = GOOGLE_ULONGLONG(0);
  offset_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallSnapshotReq::~InstallSnapshotReq() {
  // @@protoc_insertion_point(destructor:tinynet.raft.InstallSnapshotReq)
  SharedDtor();
}

void InstallSnapshotReq::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void InstallSnapshotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallSnapshotReq_descriptor_;
}

const InstallSnapshotReq& InstallSnapshotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

InstallSnapshotReq* InstallSnapshotReq::default_instance_ = NULL;

InstallSnapshotReq* InstallSnapshotReq::New() const {
  return new InstallSnapshotReq;
}

void InstallSnapshotReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstallSnapshotReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(term_, lastincludedterm_);
    ZR_(offset_, done_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallSnapshotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.InstallSnapshotReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 peerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peerid_)));
          set_has_peerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leaderId;
        break;
      }

      // optional int32 leaderId = 3;
      case 3: {
        if (tag == 24) {
         parse_leaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastIncludedIndex;
        break;
      }

      // optional uint64 lastIncludedIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_lastIncludedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastincludedindex_)));
          set_has_lastincludedindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastIncludedTerm;
        break;
      }

      // optional uint64 lastIncludedTerm = 5;
      case 5: {
        if (tag == 40) {
         parse_lastIncludedTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastincludedterm_)));
          set_has_lastincludedterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 6;
      case 6: {
        if (tag == 48) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_done;
        break;
      }

      // optional bool done = 8;
      case 8: {
        if (tag == 64) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.InstallSnapshotReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.InstallSnapshotReq)
  return false;
#undef DO_
}

void InstallSnapshotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.InstallSnapshotReq)
  // optional int32 peerId = 1;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->peerid(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // optional int32 leaderId = 3;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderid(), output);
  }

  // optional uint64 lastIncludedIndex = 4;
  if (has_lastincludedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastincludedindex(), output);
  }

  // optional uint64 lastIncludedTerm = 5;
  if (has_lastincludedterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastincludedterm(), output);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->offset(), output);
  }

  // optional bytes data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional bool done = 8;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.InstallSnapshotReq)
}

::google::protobuf::uint8* InstallSnapshotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.InstallSnapshotReq)
  // optional int32 peerId = 1;
  if (has_peerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->peerid(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // optional int32 leaderId = 3;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leaderid(), target);
  }

  // optional uint64 lastIncludedIndex = 4;
  if (has_lastincludedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastincludedindex(), target);
  }

  // optional uint64 lastIncludedTerm = 5;
  if (has_lastincludedterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lastincludedterm(), target);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->offset(), target);
  }

  // optional bytes data = 7;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional bool done = 8;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.InstallSnapshotReq)
  return target;
}

int InstallSnapshotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 peerId = 1;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peerid());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional int32 leaderId = 3;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderid());
    }

    // optional uint64 lastIncludedIndex = 4;
    if (has_lastincludedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastincludedindex());
    }

    // optional uint64 lastIncludedTerm = 5;
    if (has_lastincludedterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastincludedterm());
    }

    // optional uint32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bool done = 8;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallSnapshotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallSnapshotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallSnapshotReq::MergeFrom(const InstallSnapshotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peerid()) {
      set_peerid(from.peerid());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_lastincludedindex()) {
      set_lastincludedindex(from.lastincludedindex());
    }
    if (from.has_lastincludedterm()) {
      set_lastincludedterm(from.lastincludedterm());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallSnapshotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotReq::CopyFrom(const InstallSnapshotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotReq::IsInitialized() const {

  return true;
}

void InstallSnapshotReq::Swap(InstallSnapshotReq* other) {
  if (other != this) {
    std::swap(peerid_, other->peerid_);
    std::swap(term_, other->term_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(lastincludedindex_, other->lastincludedindex_);
    std::swap(lastincludedterm_, other->lastincludedterm_);
    std::swap(offset_, other->offset_);
    std::swap(data_, other->data_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallSnapshotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallSnapshotReq_descriptor_;
  metadata.reflection = InstallSnapshotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallSnapshotResp::kTermFieldNumber;
#endif  // !_MSC_VER

InstallSnapshotResp::InstallSnapshotResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.InstallSnapshotResp)
}

void InstallSnapshotResp::InitAsDefaultInstance() {
}

InstallSnapshotResp::InstallSnapshotResp(const InstallSnapshotResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.InstallSnapshotResp)
}

void InstallSnapshotResp::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallSnapshotResp::~InstallSnapshotResp() {
  // @@protoc_insertion_point(destructor:tinynet.raft.InstallSnapshotResp)
  SharedDtor();
}

void InstallSnapshotResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstallSnapshotResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallSnapshotResp_descriptor_;
}

const InstallSnapshotResp& InstallSnapshotResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

InstallSnapshotResp* InstallSnapshotResp::default_instance_ = NULL;

InstallSnapshotResp* InstallSnapshotResp::New() const {
  return new InstallSnapshotResp;
}

void InstallSnapshotResp::Clear() {
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallSnapshotResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.InstallSnapshotResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.InstallSnapshotResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.InstallSnapshotResp)
  return false;
#undef DO_
}

void InstallSnapshotResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.InstallSnapshotResp)
  // optional uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.InstallSnapshotResp)
}

::google::protobuf::uint8* InstallSnapshotResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.InstallSnapshotResp)
  // optional uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.InstallSnapshotResp)
  return target;
}

int InstallSnapshotResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallSnapshotResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallSnapshotResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallSnapshotResp::MergeFrom(const InstallSnapshotResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallSnapshotResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotResp::CopyFrom(const InstallSnapshotResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResp::IsInitialized() const {

  return true;
}

void InstallSnapshotResp::Swap(InstallSnapshotResp* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallSnapshotResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallSnapshotResp_descriptor_;
  metadata.reflection = InstallSnapshotResp_reflection_;
  return metadata;
}


// ===================================================================

RaftRpcService::~RaftRpcService() {}

const ::google::protobuf::ServiceDescriptor* RaftRpcService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftRpcService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RaftRpcService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftRpcService_descriptor_;
}

void RaftRpcService::RequestVote(::google::protobuf::RpcController* controller,
                         const ::tinynet::raft::VoteReq*,
                         ::tinynet::raft::VoteResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestVote() not implemented.");
  done->Run();
}

void RaftRpcService::AppendEntries(::google::protobuf::RpcController* controller,
                         const ::tinynet::raft::AppendEntriesReq*,
                         ::tinynet::raft::AppendEntriesResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AppendEntries() not implemented.");
  done->Run();
}

void RaftRpcService::InstallSnapshot(::google::protobuf::RpcController* controller,
                         const ::tinynet::raft::InstallSnapshotReq*,
                         ::tinynet::raft::InstallSnapshotResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InstallSnapshot() not implemented.");
  done->Run();
}

void RaftRpcService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), RaftRpcService_descriptor_);
  switch(method->index()) {
    case 0:
      RequestVote(controller,
             ::google::protobuf::down_cast<const ::tinynet::raft::VoteReq*>(request),
             ::google::protobuf::down_cast< ::tinynet::raft::VoteResp*>(response),
             done);
      break;
    case 1:
      AppendEntries(controller,
             ::google::protobuf::down_cast<const ::tinynet::raft::AppendEntriesReq*>(request),
             ::google::protobuf::down_cast< ::tinynet::raft::AppendEntriesResp*>(response),
             done);
      break;
    case 2:
      InstallSnapshot(controller,
             ::google::protobuf::down_cast<const ::tinynet::raft::InstallSnapshotReq*>(request),
             ::google::protobuf::down_cast< ::tinynet::raft::InstallSnapshotResp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RaftRpcService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tinynet::raft::VoteReq::default_instance();
    case 1:
      return ::tinynet::raft::AppendEntriesReq::default_instance();
    case 2:
      return ::tinynet::raft::InstallSnapshotReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& RaftRpcService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tinynet::raft::VoteResp::default_instance();
    case 1:
      return ::tinynet::raft::AppendEntriesResp::default_instance();
    case 2:
      return ::tinynet::raft::InstallSnapshotResp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

RaftRpcService_Stub::RaftRpcService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftRpcService_Stub::RaftRpcService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RaftRpcService_Stub::~RaftRpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftRpcService_Stub::RequestVote(::google::protobuf::RpcController* controller,
                              const ::tinynet::raft::VoteReq* request,
                              ::tinynet::raft::VoteResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftRpcService_Stub::AppendEntries(::google::protobuf::RpcController* controller,
                              const ::tinynet::raft::AppendEntriesReq* request,
                              ::tinynet::raft::AppendEntriesResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftRpcService_Stub::InstallSnapshot(::google::protobuf::RpcController* controller,
                              const ::tinynet::raft::InstallSnapshotReq* request,
                              ::tinynet::raft::InstallSnapshotResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft
}  // namespace tinynet

// @@protoc_insertion_point(global_scope)
