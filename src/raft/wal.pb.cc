// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tinynet {
namespace raft {

namespace {

const ::google::protobuf::Descriptor* ConfChangedLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfChangedLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* TermChangedLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TermChangedLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteChangedLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteChangedLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntriesAppendedLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntriesAppendedLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntriesErasedLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntriesErasedLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* WALRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WALRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_wal_2eproto() {
  protobuf_AddDesc_wal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wal.proto");
  GOOGLE_CHECK(file != NULL);
  ConfChangedLog_descriptor_ = file->message_type(0);
  static const int ConfChangedLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChangedLog, urls_),
  };
  ConfChangedLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfChangedLog_descriptor_,
      ConfChangedLog::default_instance_,
      ConfChangedLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChangedLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfChangedLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfChangedLog));
  TermChangedLog_descriptor_ = file->message_type(1);
  static const int TermChangedLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermChangedLog, current_term_),
  };
  TermChangedLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TermChangedLog_descriptor_,
      TermChangedLog::default_instance_,
      TermChangedLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermChangedLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermChangedLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TermChangedLog));
  VoteChangedLog_descriptor_ = file->message_type(2);
  static const int VoteChangedLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteChangedLog, voted_for_),
  };
  VoteChangedLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteChangedLog_descriptor_,
      VoteChangedLog::default_instance_,
      VoteChangedLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteChangedLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteChangedLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteChangedLog));
  EntriesAppendedLog_descriptor_ = file->message_type(3);
  static const int EntriesAppendedLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntriesAppendedLog, entries_),
  };
  EntriesAppendedLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntriesAppendedLog_descriptor_,
      EntriesAppendedLog::default_instance_,
      EntriesAppendedLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntriesAppendedLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntriesAppendedLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntriesAppendedLog));
  EntriesErasedLog_descriptor_ = file->message_type(4);
  static const int EntriesErasedLog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntriesErasedLog, first_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntriesErasedLog, last_index_),
  };
  EntriesErasedLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntriesErasedLog_descriptor_,
      EntriesErasedLog::default_instance_,
      EntriesErasedLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntriesErasedLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntriesErasedLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntriesErasedLog));
  WALRecord_descriptor_ = file->message_type(5);
  static const int WALRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, conf_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, term_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, vote_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, entries_appended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, entries_erased_),
  };
  WALRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WALRecord_descriptor_,
      WALRecord::default_instance_,
      WALRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WALRecord));
  LogType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfChangedLog_descriptor_, &ConfChangedLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TermChangedLog_descriptor_, &TermChangedLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteChangedLog_descriptor_, &VoteChangedLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntriesAppendedLog_descriptor_, &EntriesAppendedLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntriesErasedLog_descriptor_, &EntriesErasedLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WALRecord_descriptor_, &WALRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wal_2eproto() {
  delete ConfChangedLog::default_instance_;
  delete ConfChangedLog_reflection_;
  delete TermChangedLog::default_instance_;
  delete TermChangedLog_reflection_;
  delete VoteChangedLog::default_instance_;
  delete VoteChangedLog_reflection_;
  delete EntriesAppendedLog::default_instance_;
  delete EntriesAppendedLog_reflection_;
  delete EntriesErasedLog::default_instance_;
  delete EntriesErasedLog_reflection_;
  delete WALRecord::default_instance_;
  delete WALRecord_reflection_;
}

void protobuf_AddDesc_wal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tinynet::raft::protobuf_AddDesc_raft_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\twal.proto\022\014tinynet.raft\032\nraft.proto\"\036\n"
    "\016ConfChangedLog\022\014\n\004urls\030\001 \003(\t\"&\n\016TermCha"
    "ngedLog\022\024\n\014current_term\030\001 \001(\004\"#\n\016VoteCha"
    "ngedLog\022\021\n\tvoted_for\030\001 \001(\005\"A\n\022EntriesApp"
    "endedLog\022+\n\007entries\030\001 \003(\0132\032.tinynet.raft"
    ".LogEntryData\";\n\020EntriesErasedLog\022\023\n\013fir"
    "st_index\030\001 \001(\004\022\022\n\nlast_index\030\002 \001(\004\"\300\002\n\tW"
    "ALRecord\022#\n\004type\030\001 \001(\0162\025.tinynet.raft.Lo"
    "gType\0222\n\014conf_changed\030\002 \001(\0132\034.tinynet.ra"
    "ft.ConfChangedLog\0222\n\014term_changed\030\003 \001(\0132"
    "\034.tinynet.raft.TermChangedLog\0222\n\014vote_ch"
    "anged\030\004 \001(\0132\034.tinynet.raft.VoteChangedLo"
    "g\022:\n\020entries_appended\030\005 \001(\0132 .tinynet.ra"
    "ft.EntriesAppendedLog\0226\n\016entries_erased\030"
    "\006 \001(\0132\036.tinynet.raft.EntriesErasedLog*s\n"
    "\007LogType\022\022\n\016LT_ConfChanged\020\000\022\022\n\016LT_TermC"
    "hanged\020\001\022\022\n\016LT_VoteChanged\020\002\022\026\n\022LT_Entri"
    "esAppended\020\003\022\024\n\020LT_EntriesErased\020\004B\003\200\001\001", 719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wal.proto", &protobuf_RegisterTypes);
  ConfChangedLog::default_instance_ = new ConfChangedLog();
  TermChangedLog::default_instance_ = new TermChangedLog();
  VoteChangedLog::default_instance_ = new VoteChangedLog();
  EntriesAppendedLog::default_instance_ = new EntriesAppendedLog();
  EntriesErasedLog::default_instance_ = new EntriesErasedLog();
  WALRecord::default_instance_ = new WALRecord();
  ConfChangedLog::default_instance_->InitAsDefaultInstance();
  TermChangedLog::default_instance_->InitAsDefaultInstance();
  VoteChangedLog::default_instance_->InitAsDefaultInstance();
  EntriesAppendedLog::default_instance_->InitAsDefaultInstance();
  EntriesErasedLog::default_instance_->InitAsDefaultInstance();
  WALRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wal_2eproto {
  StaticDescriptorInitializer_wal_2eproto() {
    protobuf_AddDesc_wal_2eproto();
  }
} static_descriptor_initializer_wal_2eproto_;
const ::google::protobuf::EnumDescriptor* LogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogType_descriptor_;
}
bool LogType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ConfChangedLog::kUrlsFieldNumber;
#endif  // !_MSC_VER

ConfChangedLog::ConfChangedLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.ConfChangedLog)
}

void ConfChangedLog::InitAsDefaultInstance() {
}

ConfChangedLog::ConfChangedLog(const ConfChangedLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.ConfChangedLog)
}

void ConfChangedLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfChangedLog::~ConfChangedLog() {
  // @@protoc_insertion_point(destructor:tinynet.raft.ConfChangedLog)
  SharedDtor();
}

void ConfChangedLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfChangedLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfChangedLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfChangedLog_descriptor_;
}

const ConfChangedLog& ConfChangedLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wal_2eproto();
  return *default_instance_;
}

ConfChangedLog* ConfChangedLog::default_instance_ = NULL;

ConfChangedLog* ConfChangedLog::New() const {
  return new ConfChangedLog;
}

void ConfChangedLog::Clear() {
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfChangedLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.ConfChangedLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (tag == 10) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            this->urls(this->urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_urls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.ConfChangedLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.ConfChangedLog)
  return false;
#undef DO_
}

void ConfChangedLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.ConfChangedLog)
  // repeated string urls = 1;
  for (int i = 0; i < this->urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->urls(i).data(), this->urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.ConfChangedLog)
}

::google::protobuf::uint8* ConfChangedLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.ConfChangedLog)
  // repeated string urls = 1;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), this->urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->urls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.ConfChangedLog)
  return target;
}

int ConfChangedLog::ByteSize() const {
  int total_size = 0;

  // repeated string urls = 1;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfChangedLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfChangedLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfChangedLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfChangedLog::MergeFrom(const ConfChangedLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  urls_.MergeFrom(from.urls_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfChangedLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfChangedLog::CopyFrom(const ConfChangedLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfChangedLog::IsInitialized() const {

  return true;
}

void ConfChangedLog::Swap(ConfChangedLog* other) {
  if (other != this) {
    urls_.Swap(&other->urls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfChangedLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfChangedLog_descriptor_;
  metadata.reflection = ConfChangedLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TermChangedLog::kCurrentTermFieldNumber;
#endif  // !_MSC_VER

TermChangedLog::TermChangedLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.TermChangedLog)
}

void TermChangedLog::InitAsDefaultInstance() {
}

TermChangedLog::TermChangedLog(const TermChangedLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.TermChangedLog)
}

void TermChangedLog::SharedCtor() {
  _cached_size_ = 0;
  current_term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TermChangedLog::~TermChangedLog() {
  // @@protoc_insertion_point(destructor:tinynet.raft.TermChangedLog)
  SharedDtor();
}

void TermChangedLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TermChangedLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TermChangedLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TermChangedLog_descriptor_;
}

const TermChangedLog& TermChangedLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wal_2eproto();
  return *default_instance_;
}

TermChangedLog* TermChangedLog::default_instance_ = NULL;

TermChangedLog* TermChangedLog::New() const {
  return new TermChangedLog;
}

void TermChangedLog::Clear() {
  current_term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TermChangedLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.TermChangedLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 current_term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));
          set_has_current_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.TermChangedLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.TermChangedLog)
  return false;
#undef DO_
}

void TermChangedLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.TermChangedLog)
  // optional uint64 current_term = 1;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->current_term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.TermChangedLog)
}

::google::protobuf::uint8* TermChangedLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.TermChangedLog)
  // optional uint64 current_term = 1;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->current_term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.TermChangedLog)
  return target;
}

int TermChangedLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 current_term = 1;
    if (has_current_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TermChangedLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TermChangedLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TermChangedLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TermChangedLog::MergeFrom(const TermChangedLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TermChangedLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermChangedLog::CopyFrom(const TermChangedLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermChangedLog::IsInitialized() const {

  return true;
}

void TermChangedLog::Swap(TermChangedLog* other) {
  if (other != this) {
    std::swap(current_term_, other->current_term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TermChangedLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TermChangedLog_descriptor_;
  metadata.reflection = TermChangedLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteChangedLog::kVotedForFieldNumber;
#endif  // !_MSC_VER

VoteChangedLog::VoteChangedLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.VoteChangedLog)
}

void VoteChangedLog::InitAsDefaultInstance() {
}

VoteChangedLog::VoteChangedLog(const VoteChangedLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.VoteChangedLog)
}

void VoteChangedLog::SharedCtor() {
  _cached_size_ = 0;
  voted_for_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteChangedLog::~VoteChangedLog() {
  // @@protoc_insertion_point(destructor:tinynet.raft.VoteChangedLog)
  SharedDtor();
}

void VoteChangedLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteChangedLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteChangedLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteChangedLog_descriptor_;
}

const VoteChangedLog& VoteChangedLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wal_2eproto();
  return *default_instance_;
}

VoteChangedLog* VoteChangedLog::default_instance_ = NULL;

VoteChangedLog* VoteChangedLog::New() const {
  return new VoteChangedLog;
}

void VoteChangedLog::Clear() {
  voted_for_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteChangedLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.VoteChangedLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 voted_for = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voted_for_)));
          set_has_voted_for();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.VoteChangedLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.VoteChangedLog)
  return false;
#undef DO_
}

void VoteChangedLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.VoteChangedLog)
  // optional int32 voted_for = 1;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->voted_for(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.VoteChangedLog)
}

::google::protobuf::uint8* VoteChangedLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.VoteChangedLog)
  // optional int32 voted_for = 1;
  if (has_voted_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->voted_for(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.VoteChangedLog)
  return target;
}

int VoteChangedLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 voted_for = 1;
    if (has_voted_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voted_for());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteChangedLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteChangedLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteChangedLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteChangedLog::MergeFrom(const VoteChangedLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voted_for()) {
      set_voted_for(from.voted_for());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteChangedLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteChangedLog::CopyFrom(const VoteChangedLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteChangedLog::IsInitialized() const {

  return true;
}

void VoteChangedLog::Swap(VoteChangedLog* other) {
  if (other != this) {
    std::swap(voted_for_, other->voted_for_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteChangedLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteChangedLog_descriptor_;
  metadata.reflection = VoteChangedLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntriesAppendedLog::kEntriesFieldNumber;
#endif  // !_MSC_VER

EntriesAppendedLog::EntriesAppendedLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.EntriesAppendedLog)
}

void EntriesAppendedLog::InitAsDefaultInstance() {
}

EntriesAppendedLog::EntriesAppendedLog(const EntriesAppendedLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.EntriesAppendedLog)
}

void EntriesAppendedLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntriesAppendedLog::~EntriesAppendedLog() {
  // @@protoc_insertion_point(destructor:tinynet.raft.EntriesAppendedLog)
  SharedDtor();
}

void EntriesAppendedLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntriesAppendedLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntriesAppendedLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntriesAppendedLog_descriptor_;
}

const EntriesAppendedLog& EntriesAppendedLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wal_2eproto();
  return *default_instance_;
}

EntriesAppendedLog* EntriesAppendedLog::default_instance_ = NULL;

EntriesAppendedLog* EntriesAppendedLog::New() const {
  return new EntriesAppendedLog;
}

void EntriesAppendedLog::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntriesAppendedLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.EntriesAppendedLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tinynet.raft.LogEntryData entries = 1;
      case 1: {
        if (tag == 10) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.EntriesAppendedLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.EntriesAppendedLog)
  return false;
#undef DO_
}

void EntriesAppendedLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.EntriesAppendedLog)
  // repeated .tinynet.raft.LogEntryData entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.EntriesAppendedLog)
}

::google::protobuf::uint8* EntriesAppendedLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.EntriesAppendedLog)
  // repeated .tinynet.raft.LogEntryData entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.EntriesAppendedLog)
  return target;
}

int EntriesAppendedLog::ByteSize() const {
  int total_size = 0;

  // repeated .tinynet.raft.LogEntryData entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntriesAppendedLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntriesAppendedLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntriesAppendedLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntriesAppendedLog::MergeFrom(const EntriesAppendedLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntriesAppendedLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntriesAppendedLog::CopyFrom(const EntriesAppendedLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntriesAppendedLog::IsInitialized() const {

  return true;
}

void EntriesAppendedLog::Swap(EntriesAppendedLog* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntriesAppendedLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntriesAppendedLog_descriptor_;
  metadata.reflection = EntriesAppendedLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntriesErasedLog::kFirstIndexFieldNumber;
const int EntriesErasedLog::kLastIndexFieldNumber;
#endif  // !_MSC_VER

EntriesErasedLog::EntriesErasedLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.EntriesErasedLog)
}

void EntriesErasedLog::InitAsDefaultInstance() {
}

EntriesErasedLog::EntriesErasedLog(const EntriesErasedLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.EntriesErasedLog)
}

void EntriesErasedLog::SharedCtor() {
  _cached_size_ = 0;
  first_index_ = GOOGLE_ULONGLONG(0);
  last_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntriesErasedLog::~EntriesErasedLog() {
  // @@protoc_insertion_point(destructor:tinynet.raft.EntriesErasedLog)
  SharedDtor();
}

void EntriesErasedLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntriesErasedLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntriesErasedLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntriesErasedLog_descriptor_;
}

const EntriesErasedLog& EntriesErasedLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wal_2eproto();
  return *default_instance_;
}

EntriesErasedLog* EntriesErasedLog::default_instance_ = NULL;

EntriesErasedLog* EntriesErasedLog::New() const {
  return new EntriesErasedLog;
}

void EntriesErasedLog::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EntriesErasedLog*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(first_index_, last_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntriesErasedLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.EntriesErasedLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 first_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_index_)));
          set_has_first_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_index;
        break;
      }

      // optional uint64 last_index = 2;
      case 2: {
        if (tag == 16) {
         parse_last_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_index_)));
          set_has_last_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.EntriesErasedLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.EntriesErasedLog)
  return false;
#undef DO_
}

void EntriesErasedLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.EntriesErasedLog)
  // optional uint64 first_index = 1;
  if (has_first_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->first_index(), output);
  }

  // optional uint64 last_index = 2;
  if (has_last_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.EntriesErasedLog)
}

::google::protobuf::uint8* EntriesErasedLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.EntriesErasedLog)
  // optional uint64 first_index = 1;
  if (has_first_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->first_index(), target);
  }

  // optional uint64 last_index = 2;
  if (has_last_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.EntriesErasedLog)
  return target;
}

int EntriesErasedLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 first_index = 1;
    if (has_first_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_index());
    }

    // optional uint64 last_index = 2;
    if (has_last_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntriesErasedLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntriesErasedLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntriesErasedLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntriesErasedLog::MergeFrom(const EntriesErasedLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_index()) {
      set_first_index(from.first_index());
    }
    if (from.has_last_index()) {
      set_last_index(from.last_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntriesErasedLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntriesErasedLog::CopyFrom(const EntriesErasedLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntriesErasedLog::IsInitialized() const {

  return true;
}

void EntriesErasedLog::Swap(EntriesErasedLog* other) {
  if (other != this) {
    std::swap(first_index_, other->first_index_);
    std::swap(last_index_, other->last_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntriesErasedLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntriesErasedLog_descriptor_;
  metadata.reflection = EntriesErasedLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WALRecord::kTypeFieldNumber;
const int WALRecord::kConfChangedFieldNumber;
const int WALRecord::kTermChangedFieldNumber;
const int WALRecord::kVoteChangedFieldNumber;
const int WALRecord::kEntriesAppendedFieldNumber;
const int WALRecord::kEntriesErasedFieldNumber;
#endif  // !_MSC_VER

WALRecord::WALRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinynet.raft.WALRecord)
}

void WALRecord::InitAsDefaultInstance() {
  conf_changed_ = const_cast< ::tinynet::raft::ConfChangedLog*>(&::tinynet::raft::ConfChangedLog::default_instance());
  term_changed_ = const_cast< ::tinynet::raft::TermChangedLog*>(&::tinynet::raft::TermChangedLog::default_instance());
  vote_changed_ = const_cast< ::tinynet::raft::VoteChangedLog*>(&::tinynet::raft::VoteChangedLog::default_instance());
  entries_appended_ = const_cast< ::tinynet::raft::EntriesAppendedLog*>(&::tinynet::raft::EntriesAppendedLog::default_instance());
  entries_erased_ = const_cast< ::tinynet::raft::EntriesErasedLog*>(&::tinynet::raft::EntriesErasedLog::default_instance());
}

WALRecord::WALRecord(const WALRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tinynet.raft.WALRecord)
}

void WALRecord::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  conf_changed_ = NULL;
  term_changed_ = NULL;
  vote_changed_ = NULL;
  entries_appended_ = NULL;
  entries_erased_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WALRecord::~WALRecord() {
  // @@protoc_insertion_point(destructor:tinynet.raft.WALRecord)
  SharedDtor();
}

void WALRecord::SharedDtor() {
  if (this != default_instance_) {
    delete conf_changed_;
    delete term_changed_;
    delete vote_changed_;
    delete entries_appended_;
    delete entries_erased_;
  }
}

void WALRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WALRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WALRecord_descriptor_;
}

const WALRecord& WALRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wal_2eproto();
  return *default_instance_;
}

WALRecord* WALRecord::default_instance_ = NULL;

WALRecord* WALRecord::New() const {
  return new WALRecord;
}

void WALRecord::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    type_ = 0;
    if (has_conf_changed()) {
      if (conf_changed_ != NULL) conf_changed_->::tinynet::raft::ConfChangedLog::Clear();
    }
    if (has_term_changed()) {
      if (term_changed_ != NULL) term_changed_->::tinynet::raft::TermChangedLog::Clear();
    }
    if (has_vote_changed()) {
      if (vote_changed_ != NULL) vote_changed_->::tinynet::raft::VoteChangedLog::Clear();
    }
    if (has_entries_appended()) {
      if (entries_appended_ != NULL) entries_appended_->::tinynet::raft::EntriesAppendedLog::Clear();
    }
    if (has_entries_erased()) {
      if (entries_erased_ != NULL) entries_erased_->::tinynet::raft::EntriesErasedLog::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WALRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinynet.raft.WALRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tinynet.raft.LogType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tinynet::raft::LogType_IsValid(value)) {
            set_type(static_cast< ::tinynet::raft::LogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conf_changed;
        break;
      }

      // optional .tinynet.raft.ConfChangedLog conf_changed = 2;
      case 2: {
        if (tag == 18) {
         parse_conf_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_term_changed;
        break;
      }

      // optional .tinynet.raft.TermChangedLog term_changed = 3;
      case 3: {
        if (tag == 26) {
         parse_term_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_term_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vote_changed;
        break;
      }

      // optional .tinynet.raft.VoteChangedLog vote_changed = 4;
      case 4: {
        if (tag == 34) {
         parse_vote_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_entries_appended;
        break;
      }

      // optional .tinynet.raft.EntriesAppendedLog entries_appended = 5;
      case 5: {
        if (tag == 42) {
         parse_entries_appended:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entries_appended()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_entries_erased;
        break;
      }

      // optional .tinynet.raft.EntriesErasedLog entries_erased = 6;
      case 6: {
        if (tag == 50) {
         parse_entries_erased:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entries_erased()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinynet.raft.WALRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinynet.raft.WALRecord)
  return false;
#undef DO_
}

void WALRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinynet.raft.WALRecord)
  // optional .tinynet.raft.LogType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .tinynet.raft.ConfChangedLog conf_changed = 2;
  if (has_conf_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conf_changed(), output);
  }

  // optional .tinynet.raft.TermChangedLog term_changed = 3;
  if (has_term_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->term_changed(), output);
  }

  // optional .tinynet.raft.VoteChangedLog vote_changed = 4;
  if (has_vote_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vote_changed(), output);
  }

  // optional .tinynet.raft.EntriesAppendedLog entries_appended = 5;
  if (has_entries_appended()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entries_appended(), output);
  }

  // optional .tinynet.raft.EntriesErasedLog entries_erased = 6;
  if (has_entries_erased()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entries_erased(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinynet.raft.WALRecord)
}

::google::protobuf::uint8* WALRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinynet.raft.WALRecord)
  // optional .tinynet.raft.LogType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .tinynet.raft.ConfChangedLog conf_changed = 2;
  if (has_conf_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conf_changed(), target);
  }

  // optional .tinynet.raft.TermChangedLog term_changed = 3;
  if (has_term_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->term_changed(), target);
  }

  // optional .tinynet.raft.VoteChangedLog vote_changed = 4;
  if (has_vote_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vote_changed(), target);
  }

  // optional .tinynet.raft.EntriesAppendedLog entries_appended = 5;
  if (has_entries_appended()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entries_appended(), target);
  }

  // optional .tinynet.raft.EntriesErasedLog entries_erased = 6;
  if (has_entries_erased()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->entries_erased(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinynet.raft.WALRecord)
  return target;
}

int WALRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tinynet.raft.LogType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .tinynet.raft.ConfChangedLog conf_changed = 2;
    if (has_conf_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conf_changed());
    }

    // optional .tinynet.raft.TermChangedLog term_changed = 3;
    if (has_term_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->term_changed());
    }

    // optional .tinynet.raft.VoteChangedLog vote_changed = 4;
    if (has_vote_changed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vote_changed());
    }

    // optional .tinynet.raft.EntriesAppendedLog entries_appended = 5;
    if (has_entries_appended()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries_appended());
    }

    // optional .tinynet.raft.EntriesErasedLog entries_erased = 6;
    if (has_entries_erased()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries_erased());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WALRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WALRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WALRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WALRecord::MergeFrom(const WALRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_conf_changed()) {
      mutable_conf_changed()->::tinynet::raft::ConfChangedLog::MergeFrom(from.conf_changed());
    }
    if (from.has_term_changed()) {
      mutable_term_changed()->::tinynet::raft::TermChangedLog::MergeFrom(from.term_changed());
    }
    if (from.has_vote_changed()) {
      mutable_vote_changed()->::tinynet::raft::VoteChangedLog::MergeFrom(from.vote_changed());
    }
    if (from.has_entries_appended()) {
      mutable_entries_appended()->::tinynet::raft::EntriesAppendedLog::MergeFrom(from.entries_appended());
    }
    if (from.has_entries_erased()) {
      mutable_entries_erased()->::tinynet::raft::EntriesErasedLog::MergeFrom(from.entries_erased());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WALRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALRecord::CopyFrom(const WALRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALRecord::IsInitialized() const {

  return true;
}

void WALRecord::Swap(WALRecord* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(conf_changed_, other->conf_changed_);
    std::swap(term_changed_, other->term_changed_);
    std::swap(vote_changed_, other->vote_changed_);
    std::swap(entries_appended_, other->entries_appended_);
    std::swap(entries_erased_, other->entries_erased_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WALRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WALRecord_descriptor_;
  metadata.reflection = WALRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft
}  // namespace tinynet

// @@protoc_insertion_point(global_scope)
