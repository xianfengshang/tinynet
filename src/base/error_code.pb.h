// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error_code.proto

#ifndef PROTOBUF_error_5fcode_2eproto__INCLUDED
#define PROTOBUF_error_5fcode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace tinynet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_error_5fcode_2eproto();
void protobuf_AssignDesc_error_5fcode_2eproto();
void protobuf_ShutdownFile_error_5fcode_2eproto();


enum ErrorCode {
  ERROR_OK = 0,
  ERROR_FAILED = -1,
  ERROR_INVAL = -22,
  ERROR_OS_OOM = -5001,
  ERROR_OS_ADAPTERINFO = -5002,
  ERROR_URI_UNRECOGNIZED = -5051,
  ERROR_NET_GETADDRINFO = -5101,
  ERROR_SOCKET_BADF = -5201,
  ERROR_SOCKET_REUSEADDR = -5202,
  ERROR_SOCKET_REUSEPORT = -5203,
  ERROR_SOCKET_SETIPV6ONLY = -5204,
  ERROR_SOCKET_BIND = -5205,
  ERROR_SOCKET_LISTEN = -5206,
  ERROR_SOCKET_ACCEPT = -5207,
  ERROR_SOCKET_SETNONBLOCKING = -5208,
  ERROR_SOCKET_CLOSEDBYPEER = -5209,
  ERROR_SOCKET_CLOSEDBYSERVER = -5210,
  ERROR_SOCKET_READ = -5211,
  ERROR_SOCKET_WRITE = -5212,
  ERROR_SOCKET_POLL = -5213,
  ERROR_SOCKET_CONNECT = -5214,
  ERROR_SOCKET_CONNECTIONREFUSED = -5215,
  ERROR_SOCKET_BINDANDLISTEN = -5216,
  ERROR_UNIX_SOCKET_CONNECT = -5217,
  ERROR_SOCKET_GETSOCKNAME = -5218,
  ERROR_SOCKET_GETPEERNAME = -5219,
  ERROR_SOCKET_GETSOCKOPT = -5220,
  ERROR_SOCKET_READ_EOF = -5221,
  ERROR_SOCKET_NOT_CONNECTED = -5222,
  ERROR_SOCKET_CONNECTTIMEOUT = -5223,
  ERROR_SOCKET_CONNECTCLOSED = -5224,
  ERROR_WEBSOCKET_KEEPALIVETIMEOUT = -5301,
  ERROR_WEBSOCKET_HANDSHAKETIMEOUT = -5302,
  ERROR_WEBSOCKET_HANDSHAKE = -5303,
  ERROR_WEBSOCKET_CLOSEDBYPEER = -5304,
  ERROR_WEBSOCKET_CLOSEDBYSERVER = -5305,
  ERROR_WEBSOCKET_PAYLOAD_LENGTH = -5306,
  ERROR_HTTP_REQUEST = -5321,
  ERROR_SERVER_STARTED = -5401,
  ERROR_EVENTLOOP_REGISTER = -5411,
  ERROR_RPC_SEQUENCEERROR = -5501,
  ERROR_RPC_CHECKSUMERROR = -5502,
  ERROR_RPC_CHANNELERROR = -5503,
  ERROR_RPC_METHODNOTFOUND = -5504,
  ERROR_RPC_REQUESTCANCELED = -5505,
  ERROR_RPC_ENCODEERROR = -5506,
  ERROR_RPC_DECODEERROR = -5507,
  ERROR_RPC_MESSAGETOOLONG = -5508,
  ERROR_RAFT_NOSUCHNODE = -5601,
  ERROR_RAFT_CLUSTERDOWN = -5602,
  ERROR_RAFT_CONFIGURATION = -5603,
  ERROR_RAFT_SNAPSHOTLOADERROR = -5604,
  ERROR_RAFT_WALLOADERROR = -5605,
  ERROR_TNS_NOSTUB = -5701,
  ERROR_TNS_SERVICEUNAVAILABLE = -5702,
  ERROR_TNS_SERVICEREDIRECT = -5703,
  ERROR_TNS_MAXREDIRECT = -5704,
  ERROR_TNS_NAMENOTFOUND = -5705,
  ERROR_TNS_UNRECOGNIZEDFORMAT = -5706,
  ERROR_TNS_NAMEEXPIRED = -5707,
  ERROR_TNS_METHODNOTFOUND = -5708,
  ERROR_TDC_SERVICEUNAVAILABLE = -5801,
  ERROR_TDC_MESSAGEQUEUEOVERFLOW = -5802,
  ERROR_TDC_SERVICEMOVED = -5803,
  ERROR_TDC_MESSAGEOUTOFSEQUENCE = -5804,
  ERROR_TDC_NOSTUB = -5805,
  ERROR_MYSQL_UNINITIALIZED = -5901,
  ERROR_MYSQL_PROTOCOLVERSION = -5902,
  ERROR_MYSQL_CONNECTTIMEOUT = -5903,
  ERROR_MYSQL_HANDSHAKE = -5904,
  ERROR_MYSQL_QUERYBUSY = -5905,
  ERROR_MYSQL_READINGPACKET = -5906,
  ERROR_REDIS_CONNECTTIMEOUT = -5951,
  ERROR_REDIS_HANDSHAKE = -5952,
  ERROR_REDIS_READINGREPLY = -5953,
  ERROR_REDIS_CONNECTIONCLOSED = -5954,
  ERROR_REDIS_SUBSCRIBE = -5955,
  ERROR_PROCESS_SPAWN = -6001,
  ERROR_PROCESS_KILL = -6002
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERROR_PROCESS_KILL;
const ErrorCode ErrorCode_MAX = ERROR_OK;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace tinynet

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tinynet::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinynet::ErrorCode>() {
  return ::tinynet::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_error_5fcode_2eproto__INCLUDED
