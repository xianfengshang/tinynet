// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging.proto

#ifndef PROTOBUF_logging_2eproto__INCLUDED
#define PROTOBUF_logging_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tinynet {
namespace logging {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logging_2eproto();
void protobuf_AssignDesc_logging_2eproto();
void protobuf_ShutdownFile_logging_2eproto();

class LogMessageItem;
class LogOptions;
class LogReq;
class LogResp;

// ===================================================================

class LogMessageItem : public ::google::protobuf::Message {
 public:
  LogMessageItem();
  virtual ~LogMessageItem();

  LogMessageItem(const LogMessageItem& from);

  inline LogMessageItem& operator=(const LogMessageItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMessageItem& default_instance();

  void Swap(LogMessageItem* other);

  // implements Message ----------------------------------------------

  LogMessageItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogMessageItem& from);
  void MergeFrom(const LogMessageItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional int32 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional int32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional string file = 4;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 4;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional int32 line = 5;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 5;
  inline ::google::protobuf::int32 line() const;
  inline void set_line(::google::protobuf::int32 value);

  // optional int32 serverity = 6;
  inline bool has_serverity() const;
  inline void clear_serverity();
  static const int kServerityFieldNumber = 6;
  inline ::google::protobuf::int32 serverity() const;
  inline void set_serverity(::google::protobuf::int32 value);

  // optional string msg = 7;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 7;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int64 timestamp = 8;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tinynet.logging.LogMessageItem)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_serverity();
  inline void clear_has_serverity();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 tid_;
  ::std::string* file_;
  ::google::protobuf::int32 line_;
  ::google::protobuf::int32 serverity_;
  ::std::string* msg_;
  ::google::protobuf::int64 timestamp_;
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();

  void InitAsDefaultInstance();
  static LogMessageItem* default_instance_;
};
// -------------------------------------------------------------------

class LogOptions : public ::google::protobuf::Message {
 public:
  LogOptions();
  virtual ~LogOptions();

  LogOptions(const LogOptions& from);

  inline LogOptions& operator=(const LogOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogOptions& default_instance();

  void Swap(LogOptions* other);

  // implements Message ----------------------------------------------

  LogOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogOptions& from);
  void MergeFrom(const LogOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool logtostderr = 1;
  inline bool has_logtostderr() const;
  inline void clear_logtostderr();
  static const int kLogtostderrFieldNumber = 1;
  inline bool logtostderr() const;
  inline void set_logtostderr(bool value);

  // optional bool alsologtostderr = 2;
  inline bool has_alsologtostderr() const;
  inline void clear_alsologtostderr();
  static const int kAlsologtostderrFieldNumber = 2;
  inline bool alsologtostderr() const;
  inline void set_alsologtostderr(bool value);

  // optional bool colorlogtostderr = 3;
  inline bool has_colorlogtostderr() const;
  inline void clear_colorlogtostderr();
  static const int kColorlogtostderrFieldNumber = 3;
  inline bool colorlogtostderr() const;
  inline void set_colorlogtostderr(bool value);

  // optional int32 stderrthreshold = 4;
  inline bool has_stderrthreshold() const;
  inline void clear_stderrthreshold();
  static const int kStderrthresholdFieldNumber = 4;
  inline ::google::protobuf::int32 stderrthreshold() const;
  inline void set_stderrthreshold(::google::protobuf::int32 value);

  // optional bool log_prefix = 5;
  inline bool has_log_prefix() const;
  inline void clear_log_prefix();
  static const int kLogPrefixFieldNumber = 5;
  inline bool log_prefix() const;
  inline void set_log_prefix(bool value);

  // optional int32 logbuflevel = 6;
  inline bool has_logbuflevel() const;
  inline void clear_logbuflevel();
  static const int kLogbuflevelFieldNumber = 6;
  inline ::google::protobuf::int32 logbuflevel() const;
  inline void set_logbuflevel(::google::protobuf::int32 value);

  // optional int32 logbufsecs = 7;
  inline bool has_logbufsecs() const;
  inline void clear_logbufsecs();
  static const int kLogbufsecsFieldNumber = 7;
  inline ::google::protobuf::int32 logbufsecs() const;
  inline void set_logbufsecs(::google::protobuf::int32 value);

  // optional int32 minloglevel = 8;
  inline bool has_minloglevel() const;
  inline void clear_minloglevel();
  static const int kMinloglevelFieldNumber = 8;
  inline ::google::protobuf::int32 minloglevel() const;
  inline void set_minloglevel(::google::protobuf::int32 value);

  // optional int32 logfile_mode = 9;
  inline bool has_logfile_mode() const;
  inline void clear_logfile_mode();
  static const int kLogfileModeFieldNumber = 9;
  inline ::google::protobuf::int32 logfile_mode() const;
  inline void set_logfile_mode(::google::protobuf::int32 value);

  // optional int32 v = 10;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 10;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);

  // optional int32 max_log_size = 11;
  inline bool has_max_log_size() const;
  inline void clear_max_log_size();
  static const int kMaxLogSizeFieldNumber = 11;
  inline ::google::protobuf::int32 max_log_size() const;
  inline void set_max_log_size(::google::protobuf::int32 value);

  // optional bool stop_logging_if_full_disk = 12;
  inline bool has_stop_logging_if_full_disk() const;
  inline void clear_stop_logging_if_full_disk();
  static const int kStopLoggingIfFullDiskFieldNumber = 12;
  inline bool stop_logging_if_full_disk() const;
  inline void set_stop_logging_if_full_disk(bool value);

  // @@protoc_insertion_point(class_scope:tinynet.logging.LogOptions)
 private:
  inline void set_has_logtostderr();
  inline void clear_has_logtostderr();
  inline void set_has_alsologtostderr();
  inline void clear_has_alsologtostderr();
  inline void set_has_colorlogtostderr();
  inline void clear_has_colorlogtostderr();
  inline void set_has_stderrthreshold();
  inline void clear_has_stderrthreshold();
  inline void set_has_log_prefix();
  inline void clear_has_log_prefix();
  inline void set_has_logbuflevel();
  inline void clear_has_logbuflevel();
  inline void set_has_logbufsecs();
  inline void clear_has_logbufsecs();
  inline void set_has_minloglevel();
  inline void clear_has_minloglevel();
  inline void set_has_logfile_mode();
  inline void clear_has_logfile_mode();
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_max_log_size();
  inline void clear_has_max_log_size();
  inline void set_has_stop_logging_if_full_disk();
  inline void clear_has_stop_logging_if_full_disk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool logtostderr_;
  bool alsologtostderr_;
  bool colorlogtostderr_;
  bool log_prefix_;
  ::google::protobuf::int32 stderrthreshold_;
  ::google::protobuf::int32 logbuflevel_;
  ::google::protobuf::int32 logbufsecs_;
  ::google::protobuf::int32 minloglevel_;
  ::google::protobuf::int32 logfile_mode_;
  ::google::protobuf::int32 v_;
  ::google::protobuf::int32 max_log_size_;
  bool stop_logging_if_full_disk_;
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();

  void InitAsDefaultInstance();
  static LogOptions* default_instance_;
};
// -------------------------------------------------------------------

class LogReq : public ::google::protobuf::Message {
 public:
  LogReq();
  virtual ~LogReq();

  LogReq(const LogReq& from);

  inline LogReq& operator=(const LogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogReq& default_instance();

  void Swap(LogReq* other);

  // implements Message ----------------------------------------------

  LogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogReq& from);
  void MergeFrom(const LogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string basename = 1;
  inline bool has_basename() const;
  inline void clear_basename();
  static const int kBasenameFieldNumber = 1;
  inline const ::std::string& basename() const;
  inline void set_basename(const ::std::string& value);
  inline void set_basename(const char* value);
  inline void set_basename(const char* value, size_t size);
  inline ::std::string* mutable_basename();
  inline ::std::string* release_basename();
  inline void set_allocated_basename(::std::string* basename);

  // repeated .tinynet.logging.LogMessageItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::tinynet::logging::LogMessageItem& items(int index) const;
  inline ::tinynet::logging::LogMessageItem* mutable_items(int index);
  inline ::tinynet::logging::LogMessageItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::tinynet::logging::LogMessageItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinynet::logging::LogMessageItem >*
      mutable_items();

  // optional .tinynet.logging.LogOptions options = 3;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 3;
  inline const ::tinynet::logging::LogOptions& options() const;
  inline ::tinynet::logging::LogOptions* mutable_options();
  inline ::tinynet::logging::LogOptions* release_options();
  inline void set_allocated_options(::tinynet::logging::LogOptions* options);

  // optional int32 flush_level = 4;
  inline bool has_flush_level() const;
  inline void clear_flush_level();
  static const int kFlushLevelFieldNumber = 4;
  inline ::google::protobuf::int32 flush_level() const;
  inline void set_flush_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinynet.logging.LogReq)
 private:
  inline void set_has_basename();
  inline void clear_has_basename();
  inline void set_has_options();
  inline void clear_has_options();
  inline void set_has_flush_level();
  inline void clear_has_flush_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* basename_;
  ::google::protobuf::RepeatedPtrField< ::tinynet::logging::LogMessageItem > items_;
  ::tinynet::logging::LogOptions* options_;
  ::google::protobuf::int32 flush_level_;
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();

  void InitAsDefaultInstance();
  static LogReq* default_instance_;
};
// -------------------------------------------------------------------

class LogResp : public ::google::protobuf::Message {
 public:
  LogResp();
  virtual ~LogResp();

  LogResp(const LogResp& from);

  inline LogResp& operator=(const LogResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogResp& default_instance();

  void Swap(LogResp* other);

  // implements Message ----------------------------------------------

  LogResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogResp& from);
  void MergeFrom(const LogResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tinynet.logging.LogResp)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();

  void InitAsDefaultInstance();
  static LogResp* default_instance_;
};
// ===================================================================

class LoggingRpcService_Stub;

class LoggingRpcService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LoggingRpcService() {};
 public:
  virtual ~LoggingRpcService();

  typedef LoggingRpcService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Log(::google::protobuf::RpcController* controller,
                       const ::tinynet::logging::LogReq* request,
                       ::tinynet::logging::LogResp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoggingRpcService);
};

class LoggingRpcService_Stub : public LoggingRpcService {
 public:
  LoggingRpcService_Stub(::google::protobuf::RpcChannel* channel);
  LoggingRpcService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~LoggingRpcService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements LoggingRpcService ------------------------------------------

  void Log(::google::protobuf::RpcController* controller,
                       const ::tinynet::logging::LogReq* request,
                       ::tinynet::logging::LogResp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoggingRpcService_Stub);
};


// ===================================================================


// ===================================================================

// LogMessageItem

// optional string host = 1;
inline bool LogMessageItem::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMessageItem::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMessageItem::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMessageItem::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& LogMessageItem::host() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.host)
  return *host_;
}
inline void LogMessageItem::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.host)
}
inline void LogMessageItem::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.logging.LogMessageItem.host)
}
inline void LogMessageItem::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.logging.LogMessageItem.host)
}
inline ::std::string* LogMessageItem::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.logging.LogMessageItem.host)
  return host_;
}
inline ::std::string* LogMessageItem::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogMessageItem::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.logging.LogMessageItem.host)
}

// optional int32 pid = 2;
inline bool LogMessageItem::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMessageItem::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMessageItem::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMessageItem::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 LogMessageItem::pid() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.pid)
  return pid_;
}
inline void LogMessageItem::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.pid)
}

// optional int32 tid = 3;
inline bool LogMessageItem::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMessageItem::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMessageItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMessageItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 LogMessageItem::tid() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.tid)
  return tid_;
}
inline void LogMessageItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.tid)
}

// optional string file = 4;
inline bool LogMessageItem::has_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMessageItem::set_has_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMessageItem::clear_has_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMessageItem::clear_file() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& LogMessageItem::file() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.file)
  return *file_;
}
inline void LogMessageItem::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.file)
}
inline void LogMessageItem::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.logging.LogMessageItem.file)
}
inline void LogMessageItem::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.logging.LogMessageItem.file)
}
inline ::std::string* LogMessageItem::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.logging.LogMessageItem.file)
  return file_;
}
inline ::std::string* LogMessageItem::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogMessageItem::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.logging.LogMessageItem.file)
}

// optional int32 line = 5;
inline bool LogMessageItem::has_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMessageItem::set_has_line() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogMessageItem::clear_has_line() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogMessageItem::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline ::google::protobuf::int32 LogMessageItem::line() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.line)
  return line_;
}
inline void LogMessageItem::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.line)
}

// optional int32 serverity = 6;
inline bool LogMessageItem::has_serverity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogMessageItem::set_has_serverity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogMessageItem::clear_has_serverity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogMessageItem::clear_serverity() {
  serverity_ = 0;
  clear_has_serverity();
}
inline ::google::protobuf::int32 LogMessageItem::serverity() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.serverity)
  return serverity_;
}
inline void LogMessageItem::set_serverity(::google::protobuf::int32 value) {
  set_has_serverity();
  serverity_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.serverity)
}

// optional string msg = 7;
inline bool LogMessageItem::has_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogMessageItem::set_has_msg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogMessageItem::clear_has_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogMessageItem::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& LogMessageItem::msg() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.msg)
  return *msg_;
}
inline void LogMessageItem::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.msg)
}
inline void LogMessageItem::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.logging.LogMessageItem.msg)
}
inline void LogMessageItem::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.logging.LogMessageItem.msg)
}
inline ::std::string* LogMessageItem::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.logging.LogMessageItem.msg)
  return msg_;
}
inline ::std::string* LogMessageItem::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogMessageItem::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.logging.LogMessageItem.msg)
}

// optional int64 timestamp = 8;
inline bool LogMessageItem::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogMessageItem::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogMessageItem::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogMessageItem::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 LogMessageItem::timestamp() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogMessageItem.timestamp)
  return timestamp_;
}
inline void LogMessageItem::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogMessageItem.timestamp)
}

// -------------------------------------------------------------------

// LogOptions

// optional bool logtostderr = 1;
inline bool LogOptions::has_logtostderr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogOptions::set_has_logtostderr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogOptions::clear_has_logtostderr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogOptions::clear_logtostderr() {
  logtostderr_ = false;
  clear_has_logtostderr();
}
inline bool LogOptions::logtostderr() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.logtostderr)
  return logtostderr_;
}
inline void LogOptions::set_logtostderr(bool value) {
  set_has_logtostderr();
  logtostderr_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.logtostderr)
}

// optional bool alsologtostderr = 2;
inline bool LogOptions::has_alsologtostderr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogOptions::set_has_alsologtostderr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogOptions::clear_has_alsologtostderr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogOptions::clear_alsologtostderr() {
  alsologtostderr_ = false;
  clear_has_alsologtostderr();
}
inline bool LogOptions::alsologtostderr() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.alsologtostderr)
  return alsologtostderr_;
}
inline void LogOptions::set_alsologtostderr(bool value) {
  set_has_alsologtostderr();
  alsologtostderr_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.alsologtostderr)
}

// optional bool colorlogtostderr = 3;
inline bool LogOptions::has_colorlogtostderr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogOptions::set_has_colorlogtostderr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogOptions::clear_has_colorlogtostderr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogOptions::clear_colorlogtostderr() {
  colorlogtostderr_ = false;
  clear_has_colorlogtostderr();
}
inline bool LogOptions::colorlogtostderr() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.colorlogtostderr)
  return colorlogtostderr_;
}
inline void LogOptions::set_colorlogtostderr(bool value) {
  set_has_colorlogtostderr();
  colorlogtostderr_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.colorlogtostderr)
}

// optional int32 stderrthreshold = 4;
inline bool LogOptions::has_stderrthreshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogOptions::set_has_stderrthreshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogOptions::clear_has_stderrthreshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogOptions::clear_stderrthreshold() {
  stderrthreshold_ = 0;
  clear_has_stderrthreshold();
}
inline ::google::protobuf::int32 LogOptions::stderrthreshold() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.stderrthreshold)
  return stderrthreshold_;
}
inline void LogOptions::set_stderrthreshold(::google::protobuf::int32 value) {
  set_has_stderrthreshold();
  stderrthreshold_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.stderrthreshold)
}

// optional bool log_prefix = 5;
inline bool LogOptions::has_log_prefix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogOptions::set_has_log_prefix() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogOptions::clear_has_log_prefix() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogOptions::clear_log_prefix() {
  log_prefix_ = false;
  clear_has_log_prefix();
}
inline bool LogOptions::log_prefix() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.log_prefix)
  return log_prefix_;
}
inline void LogOptions::set_log_prefix(bool value) {
  set_has_log_prefix();
  log_prefix_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.log_prefix)
}

// optional int32 logbuflevel = 6;
inline bool LogOptions::has_logbuflevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogOptions::set_has_logbuflevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogOptions::clear_has_logbuflevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogOptions::clear_logbuflevel() {
  logbuflevel_ = 0;
  clear_has_logbuflevel();
}
inline ::google::protobuf::int32 LogOptions::logbuflevel() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.logbuflevel)
  return logbuflevel_;
}
inline void LogOptions::set_logbuflevel(::google::protobuf::int32 value) {
  set_has_logbuflevel();
  logbuflevel_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.logbuflevel)
}

// optional int32 logbufsecs = 7;
inline bool LogOptions::has_logbufsecs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogOptions::set_has_logbufsecs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogOptions::clear_has_logbufsecs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogOptions::clear_logbufsecs() {
  logbufsecs_ = 0;
  clear_has_logbufsecs();
}
inline ::google::protobuf::int32 LogOptions::logbufsecs() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.logbufsecs)
  return logbufsecs_;
}
inline void LogOptions::set_logbufsecs(::google::protobuf::int32 value) {
  set_has_logbufsecs();
  logbufsecs_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.logbufsecs)
}

// optional int32 minloglevel = 8;
inline bool LogOptions::has_minloglevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogOptions::set_has_minloglevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogOptions::clear_has_minloglevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogOptions::clear_minloglevel() {
  minloglevel_ = 0;
  clear_has_minloglevel();
}
inline ::google::protobuf::int32 LogOptions::minloglevel() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.minloglevel)
  return minloglevel_;
}
inline void LogOptions::set_minloglevel(::google::protobuf::int32 value) {
  set_has_minloglevel();
  minloglevel_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.minloglevel)
}

// optional int32 logfile_mode = 9;
inline bool LogOptions::has_logfile_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogOptions::set_has_logfile_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogOptions::clear_has_logfile_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogOptions::clear_logfile_mode() {
  logfile_mode_ = 0;
  clear_has_logfile_mode();
}
inline ::google::protobuf::int32 LogOptions::logfile_mode() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.logfile_mode)
  return logfile_mode_;
}
inline void LogOptions::set_logfile_mode(::google::protobuf::int32 value) {
  set_has_logfile_mode();
  logfile_mode_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.logfile_mode)
}

// optional int32 v = 10;
inline bool LogOptions::has_v() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogOptions::set_has_v() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogOptions::clear_has_v() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogOptions::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 LogOptions::v() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.v)
  return v_;
}
inline void LogOptions::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.v)
}

// optional int32 max_log_size = 11;
inline bool LogOptions::has_max_log_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogOptions::set_has_max_log_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogOptions::clear_has_max_log_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogOptions::clear_max_log_size() {
  max_log_size_ = 0;
  clear_has_max_log_size();
}
inline ::google::protobuf::int32 LogOptions::max_log_size() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.max_log_size)
  return max_log_size_;
}
inline void LogOptions::set_max_log_size(::google::protobuf::int32 value) {
  set_has_max_log_size();
  max_log_size_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.max_log_size)
}

// optional bool stop_logging_if_full_disk = 12;
inline bool LogOptions::has_stop_logging_if_full_disk() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogOptions::set_has_stop_logging_if_full_disk() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogOptions::clear_has_stop_logging_if_full_disk() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogOptions::clear_stop_logging_if_full_disk() {
  stop_logging_if_full_disk_ = false;
  clear_has_stop_logging_if_full_disk();
}
inline bool LogOptions::stop_logging_if_full_disk() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogOptions.stop_logging_if_full_disk)
  return stop_logging_if_full_disk_;
}
inline void LogOptions::set_stop_logging_if_full_disk(bool value) {
  set_has_stop_logging_if_full_disk();
  stop_logging_if_full_disk_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogOptions.stop_logging_if_full_disk)
}

// -------------------------------------------------------------------

// LogReq

// optional string basename = 1;
inline bool LogReq::has_basename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogReq::set_has_basename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogReq::clear_has_basename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogReq::clear_basename() {
  if (basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_->clear();
  }
  clear_has_basename();
}
inline const ::std::string& LogReq::basename() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogReq.basename)
  return *basename_;
}
inline void LogReq::set_basename(const ::std::string& value) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  basename_->assign(value);
  // @@protoc_insertion_point(field_set:tinynet.logging.LogReq.basename)
}
inline void LogReq::set_basename(const char* value) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  basename_->assign(value);
  // @@protoc_insertion_point(field_set_char:tinynet.logging.LogReq.basename)
}
inline void LogReq::set_basename(const char* value, size_t size) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  basename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinynet.logging.LogReq.basename)
}
inline ::std::string* LogReq::mutable_basename() {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    basename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tinynet.logging.LogReq.basename)
  return basename_;
}
inline ::std::string* LogReq::release_basename() {
  clear_has_basename();
  if (basename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = basename_;
    basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogReq::set_allocated_basename(::std::string* basename) {
  if (basename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete basename_;
  }
  if (basename) {
    set_has_basename();
    basename_ = basename;
  } else {
    clear_has_basename();
    basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.logging.LogReq.basename)
}

// repeated .tinynet.logging.LogMessageItem items = 2;
inline int LogReq::items_size() const {
  return items_.size();
}
inline void LogReq::clear_items() {
  items_.Clear();
}
inline const ::tinynet::logging::LogMessageItem& LogReq::items(int index) const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogReq.items)
  return items_.Get(index);
}
inline ::tinynet::logging::LogMessageItem* LogReq::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:tinynet.logging.LogReq.items)
  return items_.Mutable(index);
}
inline ::tinynet::logging::LogMessageItem* LogReq::add_items() {
  // @@protoc_insertion_point(field_add:tinynet.logging.LogReq.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinynet::logging::LogMessageItem >&
LogReq::items() const {
  // @@protoc_insertion_point(field_list:tinynet.logging.LogReq.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinynet::logging::LogMessageItem >*
LogReq::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:tinynet.logging.LogReq.items)
  return &items_;
}

// optional .tinynet.logging.LogOptions options = 3;
inline bool LogReq::has_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogReq::set_has_options() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogReq::clear_has_options() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogReq::clear_options() {
  if (options_ != NULL) options_->::tinynet::logging::LogOptions::Clear();
  clear_has_options();
}
inline const ::tinynet::logging::LogOptions& LogReq::options() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogReq.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::tinynet::logging::LogOptions* LogReq::mutable_options() {
  set_has_options();
  if (options_ == NULL) options_ = new ::tinynet::logging::LogOptions;
  // @@protoc_insertion_point(field_mutable:tinynet.logging.LogReq.options)
  return options_;
}
inline ::tinynet::logging::LogOptions* LogReq::release_options() {
  clear_has_options();
  ::tinynet::logging::LogOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void LogReq::set_allocated_options(::tinynet::logging::LogOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:tinynet.logging.LogReq.options)
}

// optional int32 flush_level = 4;
inline bool LogReq::has_flush_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogReq::set_has_flush_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogReq::clear_has_flush_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogReq::clear_flush_level() {
  flush_level_ = 0;
  clear_has_flush_level();
}
inline ::google::protobuf::int32 LogReq::flush_level() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogReq.flush_level)
  return flush_level_;
}
inline void LogReq::set_flush_level(::google::protobuf::int32 value) {
  set_has_flush_level();
  flush_level_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogReq.flush_level)
}

// -------------------------------------------------------------------

// LogResp

// optional int32 error_code = 1;
inline bool LogResp::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogResp::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogResp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogResp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 LogResp::error_code() const {
  // @@protoc_insertion_point(field_get:tinynet.logging.LogResp.error_code)
  return error_code_;
}
inline void LogResp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:tinynet.logging.LogResp.error_code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging
}  // namespace tinynet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logging_2eproto__INCLUDED
